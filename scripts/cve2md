#!/usr/bin/perl

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use LWP::UserAgent;
use HTTP::Request;
use HTTP::Response;
use HTML::Entities;

my $ua = LWP::UserAgent->new();
$ua->requests_redirectable(['GET', 'POST', 'HEAD', 'OPTIONS']);

main();

sub main {
    my $cve = 0;
    my $output_file = 0;
    
    my %cve_data;
    
    $cve = $ARGV[0] or die("Usage : perl $0 <CVE-X-X> (<OUTPUT_FILE>)\n\n");
    $cve = uc($cve);
    $cve_data{CVE} = $cve;

    if($ARGV[1]) {
        $output_file = $ARGV[1];
    } else {
        $output_file = "./$cve.md";
    }
    
    %cve_data = getCVEInformations($cve, \%cve_data);
    writeMdFile($output_file, \%cve_data);
}

sub getCVEInformations {
    my ( $cve, $ref_cve_data ) = @_;
    my $request = 0;
    my $response = 0;
    my $match = 0;
    my $description = 0;
    
    my @urls = ("https://nvd.nist.gov/vuln/detail/$cve", "http://cve.mitre.org/cgi-bin/cvename.cgi?name=$cve", "https://access.redhat.com/security/cve/$cve");
    my @matches = ();
    
    my %cve_data = %{ $ref_cve_data };
    
    foreach my $url (@urls) {
        print "\n[*] Trying To Extract Vulnerability Informations From : $url\n";
        $request = new HTTP::Request 'GET', $url;
        $response = $ua->request($request);
        
        if($response && $response->code !~ /40[0-9]/) {
            push(@{ $cve_data{REFERENCES} }, $url);
            
            @matches = $response->content =~ m/Description<\/th>(.*)<th colspan="2">References</sgi;
            if($matches[0]) {
                $description = removeHTMLTags($matches[0]);
                $description =~ s/[\r\n\t]+/\n/gi;
                $cve_data{DESCRIPTION} = $description;
            }
            
            foreach my $line (split(/\n/, $response->content)) {
                given($line)
                {
                    when(/EXPLOIT-DB:\d+/i) {
                        ($match) = $line =~ /EXPLOIT-DB:(\d+)/i;
                        
                        if($match) {
                            $cve_data{EXPLOITDB} = $match;
                            push(@urls, "https://exploit-db.com/exploits/$match/");
                        }
                    }
                    
                    when(/osvdb=\d+">/i) {
                        ($match) = $line =~ /osvdb=(\d+)">/i;
                        $cve_data{OSVDB} = $match if($match);
                    } 
                    
                    when(/>URL:(https?:\/\/[^<]*)<\/a>/i) {
                        ($match) = $line =~ />URL:([^<]*)<\/a>/i;
                        push(@{ $cve_data{REFERENCES} }, $match) if($match);
                    }
                    
                    when(/author\/\?a=[^"]*">([^<]*)</i) {
                        ($match) = $line =~ /author\/\?a=[^"]*">([^<]*)</i;
                        $cve_data{AUTHOR} = $match if($match);
                    }
                    
                    when(/Published<\/strong>: \d[\d\-]*</i) {
                        ($match) = $line =~ /Published<\/strong>: (\d[\d\-]*)</i;
                        $cve_data{DATE} = $match if($match);
                    }
                    
                    when(/"headline">([^<]*)<\/h1>/i) {
                        ($match) = $line =~ /"headline">([^<]*)<\/h1>/i;
                        $cve_data{TITLE} = Decode($match, "HTML") if($match);
                    }
                    
                    when(/vuln-technical-details[^>]*>([^\(]*) \(<a/i) {
                        ($match) = $line =~ /vuln-technical-details[^>]*>([^\(]*) \(<a/i;
                        if($match) {
                            $cve_data{EXPLOIT_TYPE} = $match;
                        }
                    }
                }
            }
        }
    }
    
    if(!defined($cve_data{TITLE})) {
        $cve_data{TITLE} = $cve;
    }
    
    return %cve_data;
}

sub writeMdFile {
    my ( $output_file, $ref_cve_data ) = @_;
    my $output_directory = substr($output_file, 0, rindex($output_file, "/"));
    
    my %cve_data = %{ $ref_cve_data };
    system("mkdir -p $output_directory &") if(!-d $output_directory);
    
    if($cve_data{CVE}) {
        my @markdown_content = ();
        push(@markdown_content, '## ' . $cve_data{TITLE} . "\n");
        push(@markdown_content, "\n### Description :" . $cve_data{DESCRIPTION});
        push(@markdown_content, "### Author :\n" . $cve_data{AUTHOR}) if(defined($cve_data{AUTHOR}));
        push(@markdown_content, "\n\n### Date :\n" . $cve_data{DATE}) if($cve_data{DATE});
        push(@markdown_content, "\n\n### Type :\n" . $cve_data{EXPLOIT_TYPE}) if(defined($cve_data{EXPLOIT_TYPE}));
        push(@markdown_content, "\n\n### CVE :\n" . $cve_data{CVE});
        push(@markdown_content, "\n\n### OSVDB :\n" . $cve_data{OSVDB}) if(defined($cve_data{OSVDB}));
        push(@markdown_content, "\n\n### EXPLOIT-DB :\n" . $cve_data{EXPLOITDB}) if(defined($cve_data{EXPLOITDB}));
        
        push(@markdown_content, "\n\n### References :\n");
        foreach my $reference (@{ $cve_data{REFERENCES} }) {
            push(@markdown_content, "\n- [$reference]($reference)\n");
        }
        print "[*] Writting Markdown File : $output_file\n";
    
        open FILE, ">", $output_file or die print "[-] $output_file couldn't be created.\n";
        foreach my $line (@markdown_content) {
            print FILE "$line" if($line);
        }
        close FILE;
        
        print "\n[+] Done .\n";
    } else {
        print "[-] Any Informations Found .\n";
        exit;
    }
}

sub removeHTMLTags {
    my ( $source_code ) = @_;
    $source_code = decode_entities($source_code);
    
    $source_code =~ s/<.+?>/\n/g;
    $source_code =~ s/[a-zA-Z0-9\.\#]+\s*\{.+?\}//g;
    $source_code =~ s/[\n\r]+/\n/g;
    
    return $source_code;
}
