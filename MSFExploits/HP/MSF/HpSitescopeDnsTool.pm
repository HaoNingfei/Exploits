package HP::MSF::HpSitescopeDnsTool;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "HpSitescopeDnsTool";

   my $DETECTION = {
  METHOD => 'POST',
  PATH => '/servlet/Main',
  PAYLOAD => '',
  TEXT => 'Checking If : /servlet/Main Exists ...',
  VALIDATION   => {
    TCODE => ['200'],
  },
   };

my $EXPLOIT = {
  DESCRIPTION => "

        This module exploits a command injection vulnerability

        discovered in HP SiteScope 11.30 and earlier versions (tested in 11.26

        and 11.30). The vulnerability exists in the DNS Tool allowing an

        attacker to execute arbitrary commands in the context of the service. By

        default, HP SiteScope installs and runs as SYSTEM in Windows and does

        not require authentication. This vulnerability only exists on the

        Windows version. The Linux version is unaffected.

      ",
  MSF_MODULE => "hp_sitescope_dns_tool",
  PATHS => ["SiteScope/"],
  REFERENCES => [
    "https://community.rapid7.com/community/metasploit/blog/2015/10/09/r7-2015-17-hp-sitescope-dns-tool-command-injection",
    "http://www8.hp.com/us/en/software-solutions/sitescope-application-monitoring/index.html",
  ],
  TITLE => "HP SiteScope DNS Tool Command Injection",
  VARIABLES => {
    'SITE_SCOPE_PASSWORD' =>       { DESCRIPTION => "Password for authentication", VALUE => "" },
    'PATH' =>       { DESCRIPTION => "Path to SiteScope", VALUE => "/SiteScope/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'WINDOWS',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'servlet/Main',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [POST] /servlet/Main',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
