package Exploit;

our (@MESSAGE_LOGS);

use 5.10.0;
use strict;
use warnings;

no warnings 'experimental';

use FindBin qw{$RealBin $RealScript};
use Socket;
use Data::Dump qw(dump);
use Scalar::Util qw/reftype/;
use File::Slurp;
use JSON::XS;

my $DEFAULTS_INFOS = {
    'name'        => 'No Name',
    'title'       => 'No Title',
    'version'     => '0.0',
    'authors'     => [],
    'keywords'    => [],
    'references'  => [],
    'description' => 'No Description',
};

sub new {
    my $class = shift;
    my $self = {};

    $self->{name} = shift;
    $self->{detection} = shift;
    $self->{informations} = @_ ? shift : {};
    $self->{informations}->{name} = (($self->{name}) ? $self->{name} : "");

    bless($self, $class);

    $self->{plugins_directory} = $RealBin . '/../data/plugins/';
    $self->_initialize();

    return($self);
}

########################################## Read/Write Scalar Accessors #########################################


########################################## Methods #########################################

sub _initialize {
    my ( $self ) = @_;
    my @attributes_hashes = ('informations');
    
    if(-d $self->{plugins_directory} . '/' . $self->{informations}->{name} . '/') {
        if(-f $self->{plugins_directory} . '/' . $self->{informations}->{name} . '/plugin_tests.json') {
            $self->{tests} = jsonFileData($self->{plugins_directory} . '/' . $self->{informations}->{name} . '/plugin_tests.json');
        }
    }
     
    # Set our attributes
    foreach my $attribute_hash (@attributes_hashes) {
        next if(!defined($self->{$attribute_hash}) || (!ref($self->{$attribute_hash}) || ref($self->{$attribute_hash}) ne "HASH"));
        
        if(keys %{ $self->{$attribute_hash} }) {
            foreach my $attribute (keys %{ $self->{$attribute_hash} }) {
                if(!reftype($self->{$attribute_hash}->{$attribute})) {
                    $self->{lc($attribute)} = $self->{$attribute_hash}->{$attribute};
                } elsif(reftype($self->{$attribute_hash}->{$attribute}) eq 'ARRAY') {
                    @{ $self->{lc($attribute)} } = @{ $self->{$attribute_hash}->{$attribute} };
                } else {
                    %{ $self->{lc($attribute)} } = %{ $self->{$attribute_hash}->{$attribute} };
                }
            }
        }
    }
}

sub choose_payload_file {
    my ( $self, $payload_language ) = @_;
    my $payload_file = 0;
    
    given($payload_language) {
        when(/^PHP/i) {
            $payload_file = $RealBin . '/../data/payloads/web/php/uploader.php';
        }
        
        when(/^ASPX?/i) {
            $payload_file = $RealBin . '/../data/webshells/asp/cmd.asp';
        }
        
        when(/^JSPA?/i) {
            $payload_file = $RealBin . '/../data/webshells/jsp//shell.jsp';
        }
        
        when(/^(?:CGI-)?PERL/i) {
            $payload_file = $RealBin . '/../data/webshells/pl/cmd.pl';
        }
        
        when(/^(?:CGI-)?BASH/i) {
            $payload_file = $RealBin . '/../data/webshells/sh/cmd.sh';
        }
        
        when(/^CFM/i) {
            $payload_file = $RealBin . '/../data/webshells/cfm/shell.cfm',
        }
        
        when(/^JAVA/i) {
            $payload_file = $RealBin . '/../data/webshells/servlet/CmdServlet.java',
        }
    }
    
    return $payload_file;
}

sub getPluginVariable {
    my ( $self, $variable ) = @_;
    my $value = 0;
    
    if(isHash($self->{variables}->{$variable}) && $self->{variables}->{$variable}->{value}) {
        $value = $self->{variables}->{$variable}->{value};
    }
    
    return $value;
}

sub base_path {
    my $self = shift;
    
    return "$RealBin/../";
}

sub Initialize {
    my ( $self ) = @_;
    my $domain = 0;
    my $uri = 0;
    my $URL = 0;                                          # URL Object
    my $target = 0;                                       # Target Object
    
    $self->{batch_mode} = $self->getPluginVariable("BATCH_MODE");
    
    $self->setVars($self->{batch_mode});
    
    $self->{_DNS} = $self->dns;
    $self->{_requester} = $self->requester;     # Requester Object
    $self->{_webdriver} = $self->webdriver;     # Webdriver Object    
    $self->{_database} = $self->database;       # Database Object
    $self->{_arguments} = $self->arguments;
    $self->{_configuration} = $self->configuration;
    
    $self->{use_tor} = $self->getPluginVariable("TOR");
    $self->{verbosity} = $self->getPluginVariable("VERBOSITY");
    $self->{debug} = $self->getPluginVariable("DEBUG");
    $self->{job_id} = $self->getPluginVariable("JOB_ID");
    
    $self->{output_directory} = $self->getPluginVariable("OUTPUT_DIRECTORY") if($self->getPluginVariable("OUTPUT_DIRECTORY"));
    
    
    if($self->{verbosity} || $self->{debug}) {
        $self->{_requester}->{debug} = 1;
    }
    
    if($self->{use_tor}) {
        $self->{_requester} = setTor($self->{_requester});
    }
    
    if($self->getPluginVariable("TARGET")) {
        $target = $self->getPluginVariable("TARGET");
        $URL = $target->{target_url};
    } elsif($self->getPluginVariable("URL")) {
        $URL = $self->getPluginVariable("URL");
    } elsif($self->getPluginVariable("URI")) {
        $uri = $self->getPluginVariable("URI");
        $URL = $self->{_requester}->new_url($self->getPluginVariable("URI"), 'GET');
    } elsif($self->getPluginVariable("DOMAIN")) {
        $domain = $self->getPluginVariable("DOMAIN");
        $uri = "http://" . $domain . "/";
        $URL = $self->{_requester}->new_url($uri, 'GET');
    } elsif($self->getPluginVariable("URIS")) {
        foreach my $uri_argument (split(/\s*,\s*/, $self->getPluginVariable("URIS"))) {
            push(@{ $self->{uris} }, $uri_argument);
        }
    } elsif($self->getPluginVariable("DOMAINS")) {
        foreach my $domain_argument (split(/\s*,\s*/, $self->getPluginVariable("DOMAINS"))) {
            push(@{ $self->{domains} }, $domain_argument);
        }
    } elsif($self->getPluginVariable("URIS_FILE")) {
        if(-f $self->getPluginVariable("URIS_FILE")) {
            push(@{ $self->{uris} }, read_file($self->getPluginVariable("URIS_FILE"), 1));
        } else {
            warning("Couldn't read domains file: " . $self->getPluginVariable("DOMAINS_FILE"));
        }
    } elsif($self->getPluginVariable("DOMAINS_FILE")) {
        if(-f $self->getPluginVariable("DOMAINS_FILE")) {
            push(@{ $self->{domains} }, read_file($self->getPluginVariable("DOMAINS_FILE"), 1));
        } else {
            warning("Couldn't read domains file: " . $self->getPluginVariable("DOMAINS_FILE"));
        }
    }
    
    if($URL) {
        $target = Target->new($URL) if(!$target);
        $self->{target} = $target if(!defined($self->{target}) || !$self->{target});
        $self->{target_id} = getTargetColumn($self->{_database}, 'id', $target->{domain}, $target->{port});
        $self->{url} = $URL;
        $self->{main_domain} = $URL->{main_domain};
        $self->{domain} = $URL->{domain};
        $self->{uri} = $URL->{uri};
        $self->{port} = $URL->{port};
    }
    
    push(@{ $self->{domains} }, $self->{domain}) if($self->{domain});
    push(@{ $self->{uris} }, $self->{uri}) if($self->{uri});
    push(@{ $self->{urls} }, $self->{url}) if($self->{url});
}

sub initializePluginTarget {
    my ( $self ) = @_;
    my $output_filename = 0;
    
    if(!$self->{output_directory} && defined($self->{_configuration}->{config_data}->{web_interface}->{'targets-directory'}) && $self->{_configuration}->{config_data}->{web_interface}->{'targets-directory'} && $self->{main_domain} && $self->{domain}) {
        $self->{output_directory} = $self->{_configuration}->{config_data}->{web_interface}->{'targets-directory'} . '/' . $self->{main_domain} . '/' . $self->{domain};
    }
    
    if($self->{plugin}->{output_filename}) {
        $output_filename = $self->{plugin}->{output_filename};
    } else {
        $output_filename = $self->{informations}->{name} . '-' . getDateTime() . '.html';
    }
    
    $self->{log_file_filename} = 'console-' . getDateTime() . '.log';
    $self->{log_file} = $self->{output_directory} . '/logs/' . $self->{log_file_filename};
    $self->{report_file} = $self->{output_directory} . '/reports/' . $output_filename;
    $self->{output_file} = $self->{plugin}->{report_file};
    
    if(!-d $self->{output_directory} . '/logs') {
        system("mkdir -p '" . $self->{output_directory} . "/logs'");
    }
    
    $self->createJob() if(!$self->{job_id});
    $self->{jobs}->{$self->{job_id}} = $self->{_database}->get_record('jobs', { 'id' => { position => 1, value => $self->{job_id} } });
    
    if(!defined($self->{informations}->{type}) || !$self->{informations}->{type}) {
        $self->{informations}->{type} = 'plugin';
    }
    
    if(!defined($self->{plugin}->{report}->{template}) || !$self->{plugin}->{report}->{template}) {
        my $report_template_file  = 'templates/reports/plugins/html/' . $self->{informations}->{type} . '_report.tpl';
        $self->{plugin}->{report}->{template} = $report_template_file if($report_template_file && -f $report_template_file);
    }
    $self->{plugin}->{report}->{type} = $self->{informations}->{type} if(!defined($self->{plugin}->{report}->{type}) || !$self->{plugin}->{report}->{type});
    $self->{plugin}->{report}->{output_format} = 'HTML' if(!defined($self->{plugin}->{report}->{output_format}) || !$self->{plugin}->{report}->{output_format});
    
    $self->{_report} = Report->new($self->{_database}, $self->{informations}->{name} . ' Report', $self->{report_file}, $self->{plugin}->{report}->{type}, $self->{plugin}->{report}->{output_format}, $self->{plugin}->{report}->{template});
    
}

sub runPlugin {
    my ( $self ) = @_;
    my $plugin_function = $self->{informations}->{name};
    
    # Load required stuff (lib/StuKa/Plugins.pm)
    $self->Initialize();
    
    if($self->can("$plugin_function")) {
        if(0+@{ $self->{urls} }) {
            foreach my $URL (@{ $self->{urls} }) {
                my $plugin_start = getDateTime();
                my $target = Target->new($URL);
                
                reset_logs();
                
                while(!defined($self->{requests_session_id}) || !$self->{requests_session_id}) {
                    $self->{requests_session_id} = randtext(32, 'ulc');
                }
                $self->{_requester}->new_requests_session($self->{requests_session_id});
                
                $self->{target} = $target;
                $self->{target_id} = getTargetColumn($self->{_database}, 'id', $target->{domain}, $target->{port});
                $self->{url} = $URL;
                $self->{main_domain} = $URL->{main_domain};
                $self->{domain} = $URL->{domain};
                $self->{uri} = $URL->{uri};
                $self->{port} = $URL->{port};
                
                $self->initializePluginTarget();
                
                info($self->{informations}->{name}, "Starting", "Processing url: " . $URL->{uri});
                
                if($self->{informations}->{type} && $self->{informations}->{type} eq "scanner_plugin") {
                    $self->{results}->{$URL->{main_domain}}->{$URL->{domain}}->{$URL->{uri}} = $self->$plugin_function($URL);
                } else {
                    $self->{results}->{$URL->{main_domain}}->{$URL->{domain}}->{$URL->{uri}} = $self->$plugin_function($URL->{uri});
                }
                
                $self->{results}->{$URL->{main_domain}}->{$URL->{domain}}->{$URL->{uri}}->{plugin_start} = $plugin_start;
                $self->{results}->{$URL->{main_domain}}->{$URL->{domain}}->{$URL->{uri}}->{plugin_end} = getDateTime();
                $self->{results}->{$URL->{main_domain}}->{$URL->{domain}}->{$URL->{uri}}->{url} = $URL;
                $self->{results}->{$URL->{main_domain}}->{$URL->{domain}}->{$URL->{uri}}->{domain} = $URL->{domain};
                $self->{results}->{$URL->{main_domain}}->{$URL->{domain}}->{$URL->{uri}}->{log_file} = $self->{log_file};
                
                info($self->{informations}->{name}, $URL->{domain}, "Saving results in: " . $self->{output_directory});
                
                open(STDOUT, "| aha --black > '" . $self->{log_file} . "'");
                select STDOUT;
                foreach my $log_message (get_logs()) {
                    print "$log_message";
                }
                close(STDOUT);
                select STDOUT;
                
                $self->Finish();
            }
        } else {
            warning($self->{informations}->{name} . ": Missing URLs .");
        }
    }
    
    return $self->{results};
}

sub Finish {
    my ( $self ) = @_;
    
    if(defined($self->{informations}->{type}) && $self->{informations}->{type}) {
        foreach my $target_main_domain (sort keys %{ $self->{results} }) {
            foreach my $target_domain (sort keys %{ $self->{results}->{$target_main_domain} }) {
                foreach my $target_uri (sort keys %{ $self->{results}->{$target_main_domain}->{$target_domain} }) {
                    my $report = 0;
                    
                    if($self->{informations}->{type} eq 'plugin') {
                        $report = $self->pluginReport($self->{results}->{$target_main_domain}->{$target_domain}->{$target_uri});
                    } elsif($self->{informations}->{type} eq 'service_plugin') {
                        if($self->can("serviceReport")) {
                            $report = $self->serviceReport($self->{results}->{$target_main_domain}->{$target_domain}->{$target_uri});
                        }
                    } elsif($self->{informations}->{type} eq 'scanner_plugin') {
                        if($self->can("scannerReport")) {
                            $report = $self->scannerReport($self->{results}->{$target_main_domain}->{$target_domain}->{$target_uri});
                        }
                    }
                    
                    if($report) {
                        $report->report();
                        $self->{reports}->{$target_main_domain}->{$target_domain}->{$target_uri} = $report;
                    }
                }
            }
        }
    }
    
    $self->updateJob();
    $self->setVar("TARGET", $self->{target}) if($self->{target});
}

sub pluginReport {
    my ( $self, $data ) = @_;
    
    return $self->{_report};
}

sub createJob {
    my ( $self ) = @_;
    my $variables = '';
    
    foreach my $variable_name (sort keys %{ $self->{variables} }) {
        if(isHash($self->{variables}->{$variable_name}) && $self->{variables}->{$variable_name}->{value}) {
            if(!$variables) {
                $variables = $variable_name . '=' . $self->{variables}->{$variable_name}->{value};
            } else {
                $variables .= ',' . $variable_name . '=' . $self->{variables}->{$variable_name}->{value};
            }
        }
    }

    my $job_data = {
        'id' => ($self->{_database}->get_table_last_id('jobs') ? $self->{_database}->get_table_last_id('jobs')+1 : 0),
        'variables' => $variables,
        'plugin_id' => $self->{_database}->get_record_column('plugins', 'id', { plugin => { position => 1, value => $self->{informations}->{name} } }),
        'message' => $self->{message},
        'comment' => $self->{comment},
        'created' => mysqlDatetime(),
        'status' => 'running',
        'type' => join(',', @{ $self->{informations}->{types} }),
        'target_id' => $self->{target_id},
    };
    
    if(defined($self->{comment}) && $self->{comment}) {
        $job_data->{comment} = $self->{comment};
    }
        
    if(defined($self->{output_file}) && $self->{output_file}) {
        $job_data->{results_file} = $self->{output_file};
    }
    
    addDbJob($self->{_database}, $job_data);
    
    $self->{job_id} = $job_data->{id};
    $self->{jobs}->{$self->{job_id}} = $job_data;
}

sub updateJob {
    my ( $self ) = @_;
    my $interface_directory = quotemeta($self->{_configuration}->{config_data}->{web_interface}->{'interface-directory'});
    my $result_file = 0;
    
    if($self->{report_file}) {
        $result_file = $self->{report_file};
    }

    if(defined($self->{job_id}) && $self->{job_id} && defined($self->{jobs}->{$self->{job_id}})) {
        my $job_data = {};
        
        foreach my $attribute_name (sort keys %{ $self->{jobs}->{$self->{job_id}} }) {
            $job_data->{$attribute_name} = $self->{jobs}->{$self->{job_id}}->{$attribute_name};
        }
        
        $job_data->{"status"} = "finished";
        
        if($result_file) {
            $result_file =~ s/$interface_directory//gi;
            $job_data->{"results_file"} = $result_file;
        }
        
        updateDbJob($self->{_database}, $job_data);
    }
}

sub _dump {
    my $self = shift;
    print dump($self);
}

# TODO: Find a way to fuzz the headers also
sub buildRequests {
    my ( $self, $url ) = @_;
    my $uri = new URI::URL $url;
    my $header_value = 0;
    my $request = 0;
    my $count = 1;
    
    my @fuzzed_paths = ();
    my @fuzzed_payloads = ();
    my @temp_requests = ();
    my @requests = ();
    my @exploit_urls = ();
    
    my %headers;
    
    if($self->{port}) {
        $url = $uri->scheme . '://' . $uri->host . ':' . $self->{port} . $uri->path;
    }
    
    if(keys %{ $self->{requests} }) {
        foreach my $request_title (sort keys %{ $self->{requests} }) {
            $count = 1;
            
            $self->{requests}->{$request_title}->{method} = 'GET' if(!$self->{requests}->{$request_title}->{method});

            if(keys %{ $self->{requests}->{$request_title}->{headers} }) {
                foreach my $header_name (keys %{ $self->{requests}->{$request_title}->{headers} }) {
                    $header_value = $self->{requests}->{$request_title}->{headers}->{$header_name};
                    $header_value = $self->fuzzSingle($header_value);
                    $self->{headers}->{$header_name} = $header_value;
                    $headers{$header_name} = $header_value;
                    
                }
            }
            
            $self->{requests}->{$request_title}->{text} = $self->fuzzSingle($self->{requests}->{$request_title}->{text} );
            @{ $self->{requests}->{$request_title}->{validation}->{tcode} }= ("200", "302", "403") if(!$self->{requests}->{$request_title}->{validation}); 
            
            
            @fuzzed_paths = $self->fuzzString($self->{requests}->{$request_title}->{path});
            @fuzzed_payloads = $self->fuzzString($self->{requests}->{$request_title}->{payload});
            
            if(@fuzzed_payloads && $fuzzed_payloads[1]) {
                foreach my $fuzzed_payload (@fuzzed_payloads) {
                    if(@fuzzed_paths  && $fuzzed_paths[1]) {
                        foreach my $fuzzed_path (@fuzzed_paths) {
                            $fuzzed_path = '' if(!$fuzzed_path);
                            $request = $self->{_requester}->getRequest($self->{requests}->{$request_title}->{method}, $url . $fuzzed_path, $fuzzed_payload, \%headers);
                            $self->{requests}->{"$request_title-$count"} = $self->{requests}->{$request_title};
                            $self->{requests}->{"$request_title-$count"}->{request} = $request;
                            $count++;
                        }
                    } else {
                        $request = $self->{_requester}->getRequest($self->{requests}->{$request_title}->{method}, $url . $self->{requests}->{$request_title}->{path}, $fuzzed_payload, \%headers);
                        $self->{requests}->{"$request_title"} = $self->{requests}->{$request_title};
                        $self->{requests}->{"$request_title"}->{request} = $request;
                        $count++;
                    }
                }
            } else {
                if(@fuzzed_paths && $fuzzed_paths[1]) {
                    foreach my $fuzzed_path (@fuzzed_paths) {
                        $fuzzed_path = '' if(!$fuzzed_path);
                        $request = $self->{_requester}->getRequest($self->{requests}->{$request_title}->{method}, $url . $fuzzed_path, $self->{requests}->{$request_title}->{payload}, \%headers);
                        $self->{requests}->{"$request_title-$count"} = $self->{requests}->{$request_title};
                        $self->{requests}->{"$request_title-$count"}->{request} = $request;
                        $count++;
                    }
                } else {
                    $request = $self->{_requester}->getRequest($self->{requests}->{$request_title}->{method}, $url . $self->{requests}->{$request_title}->{path}, $self->{requests}->{$request_title}->{payload}, \%headers);
                    $self->{requests}->{$request_title}->{request} = $request;
                }
            }
            
        }
    } else {
        $count = 1;
        if(@{ $self->{paths} }) {
            foreach my $path (@{ $self->{paths} }) {
                $path = '' if(!$path);
                my @paths = $self->fuzzString($path);
                push(@exploit_urls, $url . $paths[0]);
            }
        } else {
            push(@exploit_urls, $url);
        }
        
        foreach my $exploit_url (@exploit_urls) {
            $count = 1;
            if(@{ $self->{payloads} }) {
                foreach my $payload (@{ $self->{payloads} }) {
                    $payload = '' if(!$payload);
                    # If the method is GET, then the payload come in the url, however in the requests content
                    if($self->{method} =~ /GET/i) {
                        $request = new HTTP::Request $self->{method}, $exploit_url . '?' . $payload;
                    } else {
                        $request = new HTTP::Request $self->{method}, $exploit_url;
                        $request->content_type('application/x-www-form-urlencoded') if(!$self->{headers}->{"Content-Type"});
                        $request->content($payload);
                    }
                    push(@temp_requests, $request);
                }
            } else {
                $request = new HTTP::Request $self->{method}, $exploit_url;
                push(@temp_requests, $request);
            }
        }
        
        if(keys %{ $self->{headers} }) {
            $count = 1;
            foreach my $temp_request (@temp_requests) {
                foreach my $header_name (keys %{ $self->{headers} }) {
                    $header_value = $self->{headers}{$header_name};
                    
                    if($header_value) {
                        $temp_request->header($header_name => $header_value);
                    } else {
                        $temp_request->header($header_name => "");
                    }
                    $self->{requests}->{"REQUEST-$count"}->{text} = "Sending Exploit Request #$count";
                    $self->{requests}->{"REQUEST-$count"}->{request} = $temp_request;
                    $count++;
                }
            }
        } else {
            foreach my $temp_request (@temp_requests) {
                $self->{requests}->{"REQUEST-$count"}->{text} = "Sending Exploit Request #$count";
                $self->{requests}->{"REQUEST-$count"}->{request} = $temp_request;
                $count++;
            }
        }
    }
    
    return %{ $self->{requests} };
}

sub setDefaults {
    my ( $self, $hash ) = @_;
    
    $self->{informations} = $self->mergeHashRec($self->{informations}, $hash);
}

sub Info {
    my ( $self ) = @_;;
    
    return $self->{informations};
}

sub Loadable {
    return 1;
}

sub validate {
    my ( $self ) = @_;
    
    foreach my $key (keys %{ $self->{variables} }) {
        my $variable = $self->{variables}->{$key};
        my $value = 0;
        
        if($self->getVar($key)) {
            $value = $self->getVar($key);
        } elsif($self->{variables}->{$key}->{value}) {
            $self->setVar($key, $self->{variables}->{$key}->{value});
            $value = $self->{variables}->{$key}->{value};
        }
        
        if((!defined($value) && !$value) && $variable->{required}) {
            $self->setError("Missing required option: $key");
            return;
        } elsif(!defined($value)) {
            # Option is not required, set it to the default
            if(defined($variable->{'default'})) {
                $self->setVar($key, $variable->{'default'});
            } else {
                $self->setVar($key, 0);
            }
            
            return 1;
        } elsif(defined($variable->{type}) && uc($variable->{type}) eq 'ADDR') {
            my $addr = gethostbyname($value);
            if(!$addr) {
                $self->setError("Invalid address $value for $key");
                return;
            }
            # Replace a hostname with an IP address
            $self->setVar($key, inet_ntoa($addr));
        } elsif(defined($variable->{type}) && uc($variable->{type}) eq 'PORT') {
            if($value < 1 || $value > 65535) {
                $self->setError("Invalid port $value for $key");
                return;
            }
        } elsif(defined($variable->{type}) && uc($variable->{type}) eq 'BOOL') {
            if($value !~ /^(y|n|t|f|0|1)$/i) {
                $self->setError("Invalid boolean $value for $key");
                return;
            }
            
            # Replace common true/false values with a simple 1/0
            if($value =~ /^(y|t|1)$/i) {
                $self->setVar($key, 1);
            } else {
                $self->setVar($key, 0);
            }
        } elsif(defined($variable->{type}) && uc($variable->{type}) eq 'PATH') {
            if(!-r $value) {
                $self->setError("Invalid path $value for $key");
                return;
            }
        } elsif(defined($variable->{type}) && uc($variable->{type}) eq 'FILE') {
            if(!-f $value) {
                $self->setError("Invalid file: $value for $key");
                return;
            }
        } elsif(defined($variable->{type}) && uc($variable->{type}) eq 'URL') {
            if($value !~ /^(?:https?|ftps?):\/\/(?:[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+|[a-zA-Z0-9\-\_\.]+(?:[a-zA-Z0-9\-\_\.]*)\.[a-zA-Z]+)(?:\:[0-9]+)?/i) {
                $self->setError("Invalid url $value for $key");
                return;
            }
        } else {
            return 1;
        }
    }
    return 1;
}

# Pecking order:
# 1) KEY in TempEnv
# 2) KEY in Env
# 3) selfName()::KEY in Env
# 4) KEY in Advanced
# 5) KEY in UserOpts
sub getVar {
    my ( $self, $key ) = @_;
    my $value;
    
    $value = $self->getTempEnv($key);
    return($value) if(defined($value) && $value);
    $value = $self->getGlobalEnv($key);
    return($value) if(defined($value) && $value);
    $value = $self->getGlobalEnv($self->selfName() . '::' . $key);
    return($value) if(defined($value) && $value);
    $value = $self->getAdvancedValue($key);
    return($value) if(defined($value) && $value);
    $value = $self->getUserOptsDefault($key);
    return($value) if(defined($value) && $value);
    $value = $self->{variables}->{$key}->{value} if($self->{variables}->{$key} && defined($self->{variables}->{$key}->{value}));
    
    return $value;
}

sub setVars {
    my ( $self, $batch_mode ) = @_;
    $batch_mode = 0 if(!defined($batch_mode) || !$batch_mode);
    
    foreach my $variable_name (keys %{ $self->{variables} }) {
        my $variable_value = 0;
        
        if(reftype($self->{variables}->{$variable_name}) && reftype($self->{variables}->{$variable_name}) eq 'HASH') {
            if($self->{variables}->{$variable_name}->{value}) {
                $variable_value = $self->{variables}->{$variable_name}->{value};
            } elsif(defined($self->{variables}->{$variable_name}->{'default'}) && $self->{variables}->{$variable_name}->{'default'}) {
                $variable_value = $self->{variables}->{$variable_name}->{'default'};
            } elsif($self->getVar($variable_name)) {
                $variable_value = $self->getVar($variable_name);
            }
            
            if(!$batch_mode && !$self->{variables}->{batch_mode}->{value}) {
                if(isArray($self->{variables}->{$variable_name}->{options})) {
                    $self->{variables}->{$variable_name}->{value} = getInput("Please enter a value for option", "(REQUIRED)", $variable_name, $variable_value, $self->{variables}->{$variable_name}->{required}, \@{ $self->{variables}->{$variable_name}->{options} });  
                } else {
                    $self->{variables}->{$variable_name}->{value} = getInput("Please enter a value for option", "(REQUIRED)", $variable_name, $variable_value, $self->{variables}->{$variable_name}->{required});
                }
            } else {
                $self->{variables}->{$variable_name}->{value} = $variable_value if($variable_value);
            }
        }
        $self->setVar($variable_name, $self->{variables}->{$variable_name}->{value}) if($self->{variables}->{$variable_name}->{value});
    }
}

sub setTargetDirectory {
    my ( $self, $domain ) = @_;
    my $target_directory = 0;
    my $configuration = $self->configuration;
    
    if(defined($configuration->{web_interface}) && defined($configuration->{web_interface}->{'targets-directory'})) {
        if($configuration->{web_interface}->{'targets-directory'} && -d $configuration->{web_interface}->{'targets-directory'}) {
            $target_directory = $configuration->{web_interface}->{'targets-directory'} . '/' . $domain;
            if(!-d $target_directory) {
                info($domain, "Creating target domain directory: ", $target_directory);
                system("mkdir -p " . $target_directory . "/logs");
                system("mkdir -p " . $target_directory . "/reports");
                result($domain, "Target domain directory created: ", $target_directory);
            }
        }
    }
    
    return $target_directory;
}

sub setVar {
    my ( $self, $key, $value ) = @_;
    
    given(uc($key)) {
        when('DOMAIN') {
            addDbDomain($self->database, $value) if($value);
            $self->setVar("TARGET_DIRECTORY", $self->setTargetDirectory($value)) if(!$self->getVar("TARGET_DIRECTORY"));
        }
        
        when('URI') {
            $self->setVar("DOMAIN", getDomain($value)) if(!$self->getVar("DOMAIN"));
        }
        
        when('URL') {
            if(reftype($value) && reftype($value) =~ /Url/i && $value->{uri}) {
                $self->setVar("URI", $value->{uri}) if(!$self->getVar("URI"));
                addDbUrl($self->database, $value);
            }
        }
        
        when('TARGET') {
            if(reftype($value) && reftype($value) =~ /Target/i && $value->{target_url}) {
                my $target_url = $value->{target_url};
                $self->setVar("URL", $target_url) if(!$self->getVar("URL"));
                addDbTarget($self->database, $value);
            }
        }
    }
    
    return($self->setTempEnv($key, $value)) if(defined($self->getTempEnv($key)));
    return($self->setGlobalEnv($key, $value)) if(defined($self->getGlobalEnv($key)));
    return($self->setGlobalEnv($self->selfName() . '::' . $key, $value)) if(defined($self->getGlobalEnv($self->selfName() . '::' . $key)));
    return($self->setAdvancedValue($key, $value)) if(defined($self->getAdvanced($key)));
    # Even thought it was is in UserOpts, we just mask it in Advanced
    return($self->setAdvancedValue($key, $value)) if(defined($self->getUserOptsDefault($key)));
    return 0;
}

# This will not look for $key in the global environment
sub getLocal {
    my $self = shift;
    my $key = shift;
    my $value;
    
    $value = $self->getTempEnv($key);
    return($value) if(defined($value));
    $value = $self->getGlobalEnv($self->selfName() . '::' . $key);
    return($value) if(defined($value));
    $value = $self->getAdvancedValue($key);
    return($value) if(defined($value));
    $value = $self->getUserOptsDefault($key);
    return($value);
}

sub setLocal {
    my ( $self, $key, $value ) = @_;
    
    return($self->setTempEnv($key, $value)) if(defined($self->getTempEnv($key)));
    return($self->setGlobalEnv($self->selfName() . '::' . $key, $value)) if(defined($self->getGlobalEnv($self->selfName() . '::' . $key)));
    return($self->setAdvancedValue($key, $value)) if(defined($self->getAdvanced($key)));
    # Even thought it was is in UserOpts, we just mask it in Advanced
    return($self->setAdvancedValue($key, $value)) if(defined($self->getUserOptsDefault($key)));
    return;
    
}

sub getAdvanced {
    my ( $self, $key ) = @_;
    
    return($self->{advanced}->{$key});
}

sub getAdvancedValue {
    my ( $self, $key ) = @_;
    
    #fixme why was this an issue? can't remember
    # Incase we get called with our scope prepended.
    my $removeChunk = $self->selfName() . '::';
    my $find = index($key, $removeChunk);
    substr($key, $find, length($removeChunk), '') if($find != -1);
    return if(!defined($self->{advanced}->{$key}));
    return($self->{advanced}->{$key}->{value});
}

sub setAdvanced {
    my ( $self, $key, $value ) = @_;
    $self->{advanced}->{$key} = $value if(defined($value));
    
    return $self->{advanced}->{$key};
}

sub setAdvancedValue {
    my ( $self, $key, $value ) = @_;
    
    $self->{advanced}->{$key}->{value} = undef if(defined( $self->{advanced}->{$key}));
    
    return  $self->{advanced}->{$key}->{value};
}

# UserOpts hash
sub getUserOpts {
    my ( $self, $key ) = @_;
    
    return($self->{variables}) if(!$key);
    return($self->{variables}->{$key});
}

sub getUserOptsDefault {
    my ( $self, $key ) = @_;
    my $variable = $self->getUserOpts($key);
    return if(!defined($variable));
    
    my $default = $variable->{'default'};
    
    return $default;
}

# Convert References to a list of URL's
sub refLinks {
    my ( $self ) = @_;
    my @urls = ();
    
    foreach my $ref (@{ $self->{references} }) {
        if (!reftype($ref)) {
            push(@urls, $self->refConvert(@{ $ref }));  
        } elsif(reftype($ref) =~ /ARRAY/) {
            push(@urls, $self->refConvert('URL', $ref));
        }
    }
    
    return @urls;
}

# Convert Reference Type and Data to a given URL

sub refConvert {
    my ($self, $type, $data) = @_;
    
    if ($type eq 'URL') {
        return $data;
    } elsif ($type eq 'OSVDB') {
        return 'http://www.osvdb.org/'.$data;
    } elsif ($type eq 'CVE') {
        return 'http://cve.mitre.org/cgi-bin/cvename.cgi?name='.$data;
    } elsif ($type eq 'BID') {
        return 'http://www.securityfocus.com/bid/'.$data;
    } elsif ($type eq 'MSB') {
        return 'http://www.microsoft.com/technet/security/bulletin/'.$data.'.mspx';
    } elsif ($type eq 'NSS') {
        return 'http://www.nessus.org/plugins/index.php?view=single&id='.$data;
    } elsif ($type eq 'MIL') {
        return 'http://www.milw0rm.com/metasploit/'.$data;
    } elsif ($type eq 'EXDB') {
        return 'http://www.milw0rm.com/metasploit/'.$data;
    } 
    
    return $data;
}



sub json_encode {
    my ( $data ) = @_;
    
    return JSON::XS->new->utf8->pretty->convert_blessed->allow_blessed->allow_unknown->encode($data);
}

sub json_decode {
    my ( $data ) = @_;
    
    return JSON::XS->new->utf8->convert_blessed->allow_blessed->allow_unknown->decode($data);
}

sub URI::TO_HASH {
    my @uri = shift;
    my $hash = {};
    
    foreach my $attribute_name (@uri) {
        if(!reftype($uri[$attribute_name])) {
            $hash->{$attribute_name} = $uri[$attribute_name];
        } elsif(reftype($uri[$attribute_name]) && reftype($uri[$attribute_name]) eq 'ARRAY') {
            @{ $hash->{$attribute_name} } = @{ $uri[$attribute_name] };
        }
    }
    
    return $hash;
}

sub URI::http::TO_HASH {
    return URI::TO_HASH @_;
}

sub Regexp::TO_JSON {
  my $regex = shift;
  $regex = "$regex";
  return $regex;
}

sub HTTP::Headers::TO_HASH {
    my $headers = shift;
    my $hash = {};
    
    foreach my $header_name (sort keys %{ $headers }) {
      $hash->{$header_name} = $headers->{$header_name};
        
    }
    
    return $hash;
}

sub HTTP::Headers::TO_JSON {
    my $headers = shift;
    my $hash = HTTP::Headers::TO_HASH($headers);
    
    return json_encode($hash);
}

sub HTTP::Request::TO_JSON {
    my $request = shift;
    my $hash = HTTP::Request::TO_HASH($request);
    
    return json_encode($hash);
}

sub HTTP::Request::TO_HASH {
   my $request = shift;
   
   my $hash = {
       uri => $request->{_uri}->as_string,
       method => $request->{_method},
       content => ($request->{_content} ? $request->{_content} : 0),
   };
   
    foreach my $header_name (sort keys %{ $request->{_headers} }) {
        $hash->{headers}->{$header_name} = $request->{_headers}->{$header_name};
    }
   
   return $hash;
}

sub TO_HASH {
    my $obj = shift;
    my $hash = @_ ? shift : {};

    return $obj if(!ref($obj));
    return @{ $obj } if(ref($obj) && ref($obj) eq "ARRAY");

    foreach my $k (sort keys %{ $obj }) {
        if(ref($obj->{$k}) eq '') {
            $hash->{$k} = $obj->{$k};
        } elsif(ref($obj->{$k}) eq 'ARRAY') {
            @{ $hash->{$k} } = @{ $obj->{$k} };
        } elsif(ref($obj->{$k}) eq 'HASH') {
            $hash = $obj->{$k};
        }
    }

    return $hash;
}


sub TO_JSON {
    return { %{ shift() } };
}
1;
