package ASTIUM::MSF::AstiumSqliUpload;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "AstiumSqliUpload";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

        This module exploits vulnerabilities found in Astium astium-confweb-2.1-25399 RPM and

        lower. A SQL Injection vulnerability is used to achieve authentication bypass and gain

        admin access. From an admin session arbitrary PHP code upload is possible. It is used

        to add the final PHP payload to \"/usr/local/astium/web/php/config.php\" and execute the

        \"sudo /sbin/service astcfgd reload\" command to reload the configuration and achieve

        remote root code execution.

      ",
  METHOD      => "POST",
  MSF_MODULE  => "astium_sqli_upload",
  OSVDB       => 88860,
  PATH        => "",
  PATHS       => ["__REDIRECT__", ""],
  PAYLOAD     => "?",
  VARIABLES => {
    'PATH' =>       {
  DESCRIPTION => "The base path to the Astium installation",
  VALUE => "/",
},
    'REDIRECT' =>       { DESCRIPTION => "", VALUE => "" },
    'SESSION' =>       { DESCRIPTION => "", VALUE => "" },
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
