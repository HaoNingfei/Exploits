package MSFExploits::Exploits::GLASSFISH::MSF::GlassfishDeployer;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::GLASSFISH);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "GlassfishDeployer";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "CVE" => "CVE-2011-0807",
  "DESCRIPTION" => "

          This module logs in to a GlassFish Server (Open Source or Commercial) using various

        methods (such as authentication bypass, default credentials, or user-supplied login),

        and deploys a malicious war file in order to get remote code execution. It has been

        tested on Glassfish 2.x, 3.0, 4.0 and Sun Java System Application Server 9.x. Newer

        GlassFish versions do not allow remote access (Secure Admin) by default, but is required

        for exploitation.

      ",
  "MSF_MODULE" => "glassfish_deployer",
  "OSVDB" => 71948,
  "THE USERTITLE TO AUTHENTICATE AS" => "admin",
  VARIABLES => {
    'APP_RPORT' =>       { DESCRIPTION => "The Application interface port", VALUE => 8080 },
  },

  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
