package MSFExploits::Exploits::SOAP::MSF::SoapXml;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::SOAP);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "SoapXml";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "DESCRIPTION" => undef,
  "MSF_MODULE" => "soap_xml",
  "PATHS" => [""],
  "SOAPACTION" => "\"",
  "THE HTTP CONTENT-TYPE HEADER" => "application/x-www-form-urlencoded",
  "TITLE" => "HTTP SOAP Verb/Noun Brute Force Scanner",
  "XML WEB SERVICE TITLESPACE" => "http://tempuri.org/",
  VARIABLES => {
    'XMLSOAP' =>       {
  DESCRIPTION => "XML SOAP",
  VALUE => "http://schemas.xmlsoap.org/soap/envelope/",
},
    'XMLINSTANCE' =>       {
  DESCRIPTION => "XML Schema Instance",
  VALUE => "http://www.w3.org/2001/XMLSchema-instance",
},
    'PATH' =>       { DESCRIPTION => "The path to test", VALUE => "/" },
    'XMLSCHEMA' =>       {
  DESCRIPTION => "XML Schema",
  VALUE => "http://www.w3.org/2001/XMLSchema",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'SCANNER',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'getpassword',
      PAYLOAD      => read_file('Exploits/SOAP/MSF/src/SoapXml.payload', 1),
      TEXT   => 'Sending Exploit #1 Request : [POST] /getpassword',
      HEADERS      => {
        'SOAPAction' => '"http://tempuri.org/getpassword"',
        'Expect' => '100-continue',
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
