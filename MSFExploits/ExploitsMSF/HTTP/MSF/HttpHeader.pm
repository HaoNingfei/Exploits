package MSFExploits::Exploits::HTTP::MSF::HttpHeader;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::HTTP);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "HttpHeader";

   my $DETECTION = {
  METHOD => 'HEAD',
  PATH => '/',
  PAYLOAD => '',
  TEXT => 'Checking If : / Exists ...',
  VALIDATION   => {
    TCODE => ['200'],
  },
   };

my $EXPLOIT = {
  DESCRIPTION => " This module shows HTTP Headers returned by the scanned systems. ",
  MSF_MODULE => "http_header",
  PATHS => [""],
  REFERENCES => [
    "http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html",
    "http://en.wikipedia.org/wiki/List_of_HTTP_header_fields",
  ],
  TITLE => "HTTP Header Detection",
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "The URI to use", VALUE => "/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'SCANNER',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'HEAD',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [HEAD] /',
      HEADERS      => {
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
