{
   "detection" : {
      "VALIDATION" : {
         "TCODE" : [
            "200"
         ]
      },
      "PAYLOAD" : "",
      "TEXT" : "Checking If : /includes/inline_image_upload.php Exists ...",
      "METHOD" : "POST",
      "PATH" : "/includes/inline_image_upload.php"
   },
   "informations" : {
      "METHOD" : "POST",
      "PATH" : "includes/inline_image_upload.php?",
      "PATHS" : [
         "includes/inline_image_upload.php",
         "vcms/"
      ],
      "REFERENCES" : [
         "http://xforce.iss.net/xforce/xfdb/71358"
      ],
      "PLATFORM" : "ALL",
      "TYPE" : "MSF",
      "VARIABLES" : {
         "PATH" : {
            "DESCRIPTION" : "The URI path to vcms",
            "VALUE" : "/vcms/"
         }
      },
      "MSF_MODULE" : "vcms_upload",
      "CVE" : "CVE-2011-4828",
      "DESCRIPTION" : "\n\n          This module exploits a vulnerability found on V-CMS's inline image upload feature.\n\n        The problem is due to the inline_image_upload.php file not checking the file type\n\n        before saving it on the web server. This allows any malicious user to upload a\n\n        script (such as PHP) without authentication, and then execute it with a GET request.\n\n\n\n          The issue is fixed in 1.1 by checking the extension name.  By default, 1.1 only\n\n        allows jpg, jpeg, png, gif, bmp, but it is still possible to upload a PHP file as\n\n        one of those extension names, which may still be leveraged in an attack.\n\n      ",
      "OSVDB" : 77183,
      "name" : "VcmsUpload",
      "REQUESTS" : {
         "EXPLOIT1" : {
            "METHOD" : "POST",
            "PATH" : "includes/inline_image_upload.php",
            "VALIDATION" : {
               "TCODE" : [
                  "200"
               ]
            },
            "TEXT" : "Sending Exploit #1 Request : [POST] /includes/inline_image_upload.php",
            "PAYLOAD" : "",
            "HEADERS" : {
               "Content-Type" : "multipart/form-data; boundary=----x"
            }
         }
      },
      "PAYLOAD" : ""
   },
   "path" : "includes/inline_image_upload.php?",
   "type" : "MSF",
   "plugins_directory" : "/home/evil/GIT/Exploits/../data/plugins/",
   "cve" : "CVE-2011-4828",
   "name" : "VcmsUpload",
   "references" : [
      "http://xforce.iss.net/xforce/xfdb/71358"
   ],
   "msf_module" : "vcms_upload",
   "requests" : {
      "EXPLOIT1" : {
         "METHOD" : "POST",
         "PATH" : "includes/inline_image_upload.php",
         "VALIDATION" : {
            "TCODE" : [
               "200"
            ]
         },
         "TEXT" : "Sending Exploit #1 Request : [POST] /includes/inline_image_upload.php",
         "PAYLOAD" : "",
         "HEADERS" : {
            "Content-Type" : "multipart/form-data; boundary=----x"
         }
      }
   },
   "osvdb" : 77183,
   "paths" : [
      "includes/inline_image_upload.php",
      "vcms/"
   ],
   "platform" : "ALL",
   "method" : "POST",
   "description" : "\n\n          This module exploits a vulnerability found on V-CMS's inline image upload feature.\n\n        The problem is due to the inline_image_upload.php file not checking the file type\n\n        before saving it on the web server. This allows any malicious user to upload a\n\n        script (such as PHP) without authentication, and then execute it with a GET request.\n\n\n\n          The issue is fixed in 1.1 by checking the extension name.  By default, 1.1 only\n\n        allows jpg, jpeg, png, gif, bmp, but it is still possible to upload a PHP file as\n\n        one of those extension names, which may still be leveraged in an attack.\n\n      ",
   "variables" : {
      "PATH" : {
         "DESCRIPTION" : "The URI path to vcms",
         "VALUE" : "/vcms/"
      }
   },
   "payload" : ""
}
