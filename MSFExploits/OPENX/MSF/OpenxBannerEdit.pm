package OPENX::MSF::OpenxBannerEdit;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "OpenxBannerEdit";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2009-4098",
  DESCRIPTION => "

          This module exploits a vulnerability in the OpenX advertising software.

        In versions prior to version 2.8.2, authenticated users can upload files

        with arbitrary extensions to be used as banner creative content. By uploading

        a file with a PHP extension, an attacker can execute arbitrary PHP code.



        NOTE: The file must also return either \"png\", \"gif\", or \"jpeg\" as its image

        type as returned from the PHP getimagesize() function.

      ",
  MSF_MODULE => "openx_banner_edit",
  OSVDB => 60499,
  REFERENCES => [
    "http://archives.neohapsis.com/archives/bugtraq/2009-11/0166.html",
    "http://www.openx.org/docs/2.8/release-notes/openx-2.8.2",
    "http://php.net/manual/en/function.getimagesize.php",
    "http://gynvael.coldwind.pl/?id=223",
    "http://gynvael.coldwind.pl/?id=224",
    "http://gynvael.coldwind.pl/?id=235",
    "http://programming.arantius.com/the+smallest+possible+gif",
    "http://stackoverflow.com/questions/2253404/what-is-the-smallest-valid-jpeg-file-size-in-bytes",
  ],
  TITLE => "OpenX banner-edit.php File Upload PHP Code Execution",
  VARIABLES => {
    'DESC' =>       {
  DESCRIPTION => "The description to use for the banner",
  VALUE => "Temporary banner",
},
  },

  TYPE => 'MSF',
  PLATFORM => 'UNIX',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
