package GESTIOIP::MSF::GestioipExec;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "GestioipExec";

   my $DETECTION = {

   };

my $EXPLOIT = {
  "DESCRIPTION" => "

        This module exploits a command injection flaw to create a shell script

        on the filesystem and execute it. If GestioIP is configured to use no authentication,

        no password is required to exploit the vulnerability. Otherwise, an authenticated

        user is required to exploit.

      ",
  "MSF_MODULE" => "gestioip_exec",
  "PATHS" => ["gestioip/"],
  "REFERENCES" => [
    "http://sourceforge.net/p/gestioip/gestioip/ci/ac67be9fce5ee4c0438d27dfa5c1dcbca08c457c/",
    "https://github.com/rapid7/metasploit-framework/pull/2461",
    "https://community.rapid7.com/community/metasploit/blog/2013/10/03/gestioip-authenticated-remote-command-execution-module",
  ],
  "THE USERTITLE TO AUTH AS" => "gipadmin",
  "TITLE" => "GestioIP Remote Command Execution",
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "URI", VALUE => "/gestioip/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'MULTI',
  REQUESTS => {
    EXPLOIT2 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #2 Request : [GET] ',
      HEADERS      => {
        'Content-Type' => 'application/x-www-form-urlencoded',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
