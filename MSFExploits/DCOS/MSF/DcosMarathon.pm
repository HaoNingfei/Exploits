package DCOS::MSF::DcosMarathon;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "DcosMarathon";

   my $DETECTION = {

   };

my $EXPLOIT = {
  DESCRIPTION => "

        Utilizing the DCOS Cluster's Marathon UI, an attacker can create

        a docker container with the '/' path mounted with read/write

        permissions on the host server that is running the docker container.

        As the docker container executes command as uid 0 it is honored

        by the host operating system allowing the attacker to edit/create

        files owed by root. This exploit abuses this to creates a cron job

        in the '/etc/cron.d/' path of the host server.



        *Notes: The docker image must be a valid docker image from

        hub.docker.com. Furthermore the docker container will only

        deploy if there are resources available in the DC/OS cluster.

      ",
  MSF_MODULE => "dcos_marathon",
  PATHS => ["v2/apps"],
  REFERENCES => ["https://warroom.securestate.com/dcos-marathon-compromise/"],
  TITLE => "DC/OS Marathon UI Docker Exploit",
  VARIABLES => {
    'DOCKERIMAGE' =>       {
  DESCRIPTION => "hub.docker.com image to use",
  VALUE => "python:3-slim",
},
    'PATH' =>       { DESCRIPTION => "Post path to start docker", VALUE => "/v2/apps" },
  },

  TYPE => 'MSF',
  PLATFORM => 'ALL',
  REQUESTS => {
    EXPLOIT1 => {
      METHOD       => 'GET',
      PATH   => '',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #1 Request : [GET] ',
      HEADERS      => {
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
