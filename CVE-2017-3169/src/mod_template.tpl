
/*
 * Compilation : apxs -i -a -c __MODULE-NAME__.c
 */

#include "httpd.h"
#include "http_core.h"
#include "http_protocol.h"
#include "http_request.h"
#include "http_connection.h"
#include "ap_config.h"

#define MAX_HANDLER 4

typedef int (*method_handler)(request_rec *r);

static int get_handler(request_rec *r);
static int post_handler(request_rec *r);
static int put_handler(request_rec *r);
static int delete_handler(request_rec *r);

/* The sample content handler */
static int __NAME___handler(request_rec *r)
{
    ap_set_content_type(r, "__CONTENT-TYPE__");

    /* method: 0 - GET, 1 - PUT, 2 - POST, 3 - DELETE, etc */
    method_handler methods[MAX_HANDLER] = { &get_handler, &put_handler, &post_handler, &delete_handler };
    
    if (r->method_number >= MAX_HANDLER || r->method_number < 0) {
        return DECLINED;
    }

    /* call the handler function */
    return methods[r->method_number](r);
}


/* GET */
static int get_handler(request_rec *r)
{
    char* query = r->args; /* query string */
    ap_set_content_type(r, "__CONTENT-TYPE__");

    ap_rprintf(r, "Query : %s", query);
    ap_rprintf(r, "<HTML>\n<HEAD>\n\t<TITLE>__MODULE-NAME__</TITLE>\n</HEAD><BODY>\n\t<H2>__MODULE-NAME__ Request Dump</H2>\n<UL>");
    ap_rprintf(r, "\n\t<LI>Handler: %s</LI>\nMethod: %s</LI>\n\t<LI>Path Info: %s</LI>\n\t<LI>Filename: %s</LI>\n\t<LI>Protocol: %s</LI>\n\t<LI>URI: %s</LI>\n\t<LI>Hostname: %s</LI>\n\t<LI>Query: %s</LI>\n</UL>\n</BODY>\n</HTML>", r->handler, r->method, r->path_info, r->filename, r->protocol, r->uri, r->hostname, query);
    
    return OK;
}

/* POST */
static int post_handler(request_rec *r)
{
    return OK;
}

/* PUT */
static int put_handler(request_rec *r)
{
    return OK;
}

/* DELETE */
static int delete_handler(request_rec *r)
{
    return OK;
}


/*
 *  the module registration phase
 */

/* This routine is used to actually process the connection that was received.
 * Only protocol modules should implement this hook, as it gives them an
 * opportunity to replace the standard HTTP processing with processing for
 * some other protocol.  Both echo and POP3 modules are available as
 * examples.
 *
 * This is a RUN_FIRST hook.
 */
static int __NAME___process_connection(conn_rec *c)
{
   return OK;
}


static void __NAME___register_hooks(apr_pool_t *p)
{
    ap_hook_process_connection(__NAME___process_connection, NULL, NULL, APR_HOOK_MIDDLE);
    ap_hook_handler(__NAME___handler, NULL, NULL, APR_HOOK_MIDDLE);
}

/*
 * Dispatch list for API hooks
 */

module AP_MODULE_DECLARE_DATA __NAME___module = {
    STANDARD20_MODULE_STUFF,
    NULL,                    /* create per-dir    config structures */
    NULL,                    /* merge  per-dir    config structures */
    NULL,                    /* create per-server config structures */
    NULL,                    /* merge  per-server config structures */
    NULL,                    /* table of config file commands	    */
    __NAME___register_hooks, /* register hooks                      */
};
