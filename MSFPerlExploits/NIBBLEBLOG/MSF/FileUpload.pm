package MSFPerlExploits::NIBBLEBLOG::MSF::FileUpload;
use parent qw(P1rK3r::Exploit P1rK3r::Services::NIBBLEBLOG);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "FileUpload";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'FileUpload',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'GET',
                        PATH         => '',
                        PAYLOAD      => 'admin.php',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::NIBBLEBLOG::MSF::FileUpload;
use parent qw(P1rK3r::Exploit P1rK3r::Services::NIBBLEBLOG);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "FileUpload";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'FileUpload',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'admin.php',
                        PAYLOAD      => 'username=__USERNAME__&password=__PASSWORD__',
                        TEXT         => 'Sending First Exploit Request On : /admin.php',
                        HEADERS      => {
                           'Cookie' => '',
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::NIBBLEBLOG::MSF::FileUpload;
use parent qw(P1rK3r::Exploit P1rK3r::Services::NIBBLEBLOG);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "FileUpload";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'FileUpload',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'GET',
                        PATH         => '',
                        PAYLOAD      => 'admin.php',
                        TEXT         => 'Sending First Exploit Request On : ',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::NIBBLEBLOG::MSF::FileUpload;
use parent qw(P1rK3r::Exploit P1rK3r::Services::NIBBLEBLOG);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "FileUpload";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'FileUpload',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'admin.php',
                        PAYLOAD      => 'username=__USERNAME__&password=__PASSWORD__',
                        TEXT         => 'Sending First Exploit Request On : /admin.php',
                        HEADERS      => {
                           'Cookie' => '',
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;